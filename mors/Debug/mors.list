
mors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b1c  08008b1c  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b24  08008b24  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b28  08008b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08008b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201b0  2**0
                  CONTENTS
 10 .bss          00001d8c  200001b0  200001b0  000201b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f3c  20001f3c  000201b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0ec  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b46  00000000  00000000  0003a2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  0003de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b8  00000000  00000000  0003f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025437  00000000  00000000  00040b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d884  00000000  00000000  00065f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d4b  00000000  00000000  000837d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015651e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062e0  00000000  00000000  00156570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b0 	.word	0x200001b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a80 	.word	0x08008a80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001b4 	.word	0x200001b4
 80001c4:	08008a80 	.word	0x08008a80

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fd54 	bl	8000f8c <HAL_Init>

  /* USER CODE BEGIN Init */
  press=0;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <main+0x34>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f815 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f947 	bl	8000780 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f2:	f000 f87b 	bl	80005ec <MX_I2C1_Init>
  MX_I2S3_Init();
 80004f6:	f000 f8a7 	bl	8000648 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004fa:	f000 f8d5 	bl	80006a8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004fe:	f007 fd6b 	bl	8007fd8 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000502:	f000 f907 	bl	8000714 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim6);
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <main+0x38>)
 8000508:	f003 ffcc 	bl	80044a4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x30>
 800050e:	bf00      	nop
 8000510:	2000031c 	.word	0x2000031c
 8000514:	200002c0 	.word	0x200002c0

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f008 faa2 	bl	8008a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f8e4 	bl	800376c <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 fb11 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fb45 	bl	8003c5c <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 fafa 	bl	8000bd0 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	; 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x50>)
 800062a:	f001 f83d 	bl	80016a8 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 facc 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200001cc 	.word	0x200001cc
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_I2S3_Init+0x54>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <MX_I2S3_Init+0x58>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_I2S3_Init+0x54>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_I2S3_Init+0x54>)
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <MX_I2S3_Init+0x5c>)
 8000672:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_I2S3_Init+0x54>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2S3_Init+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_I2S3_Init+0x54>)
 8000688:	f001 f952 	bl	8001930 <HAL_I2S_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000692:	f000 fa9d 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000220 	.word	0x20000220
 80006a0:	40003c00 	.word	0x40003c00
 80006a4:	00017700 	.word	0x00017700

080006a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI1_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI1_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI1_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI1_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI1_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI1_Init+0x64>)
 80006fa:	f003 fdfb 	bl	80042f4 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 fa64 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000268 	.word	0x20000268
 8000710:	40013000 	.word	0x40013000

08000714 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_TIM6_Init+0x64>)
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <MX_TIM6_Init+0x68>)
 8000726:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 65535;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_TIM6_Init+0x64>)
 800072a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_TIM6_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_TIM6_Init+0x64>)
 8000738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_TIM6_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_TIM6_Init+0x64>)
 8000746:	f003 fe5e 	bl	8004406 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000750:	f000 fa3e 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_TIM6_Init+0x64>)
 8000762:	f003 ffa7 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 fa30 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200002c0 	.word	0x200002c0
 800077c:	40001000 	.word	0x40001000

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4b80      	ldr	r3, [pc, #512]	; (800099c <MX_GPIO_Init+0x21c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a7f      	ldr	r2, [pc, #508]	; (800099c <MX_GPIO_Init+0x21c>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b7d      	ldr	r3, [pc, #500]	; (800099c <MX_GPIO_Init+0x21c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0310 	and.w	r3, r3, #16
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b79      	ldr	r3, [pc, #484]	; (800099c <MX_GPIO_Init+0x21c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a78      	ldr	r2, [pc, #480]	; (800099c <MX_GPIO_Init+0x21c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b76      	ldr	r3, [pc, #472]	; (800099c <MX_GPIO_Init+0x21c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b72      	ldr	r3, [pc, #456]	; (800099c <MX_GPIO_Init+0x21c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a71      	ldr	r2, [pc, #452]	; (800099c <MX_GPIO_Init+0x21c>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b6f      	ldr	r3, [pc, #444]	; (800099c <MX_GPIO_Init+0x21c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b6b      	ldr	r3, [pc, #428]	; (800099c <MX_GPIO_Init+0x21c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a6a      	ldr	r2, [pc, #424]	; (800099c <MX_GPIO_Init+0x21c>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b68      	ldr	r3, [pc, #416]	; (800099c <MX_GPIO_Init+0x21c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b64      	ldr	r3, [pc, #400]	; (800099c <MX_GPIO_Init+0x21c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a63      	ldr	r2, [pc, #396]	; (800099c <MX_GPIO_Init+0x21c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b61      	ldr	r3, [pc, #388]	; (800099c <MX_GPIO_Init+0x21c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b5d      	ldr	r3, [pc, #372]	; (800099c <MX_GPIO_Init+0x21c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a5c      	ldr	r2, [pc, #368]	; (800099c <MX_GPIO_Init+0x21c>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b5a      	ldr	r3, [pc, #360]	; (800099c <MX_GPIO_Init+0x21c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4857      	ldr	r0, [pc, #348]	; (80009a0 <MX_GPIO_Init+0x220>)
 8000844:	f000 fefe 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	4855      	ldr	r0, [pc, #340]	; (80009a4 <MX_GPIO_Init+0x224>)
 800084e:	f000 fef9 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, red_taylorsversion_Pin|blue1989_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f24c 0110 	movw	r1, #49168	; 0xc010
 8000858:	4853      	ldr	r0, [pc, #332]	; (80009a8 <MX_GPIO_Init+0x228>)
 800085a:	f000 fef3 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800085e:	2308      	movs	r3, #8
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	484a      	ldr	r0, [pc, #296]	; (80009a0 <MX_GPIO_Init+0x220>)
 8000876:	f000 fd31 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : finito_Pin */
  GPIO_InitStruct.Pin = finito_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(finito_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4844      	ldr	r0, [pc, #272]	; (80009a0 <MX_GPIO_Init+0x220>)
 8000890:	f000 fd24 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	483e      	ldr	r0, [pc, #248]	; (80009a4 <MX_GPIO_Init+0x224>)
 80008ac:	f000 fd16 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b0:	2308      	movs	r3, #8
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c0:	2305      	movs	r3, #5
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4836      	ldr	r0, [pc, #216]	; (80009a4 <MX_GPIO_Init+0x224>)
 80008cc:	f000 fd06 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80008d0:	2301      	movs	r3, #1
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008d4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4831      	ldr	r0, [pc, #196]	; (80009ac <MX_GPIO_Init+0x22c>)
 80008e6:	f000 fcf9 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ea:	2304      	movs	r3, #4
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	482c      	ldr	r0, [pc, #176]	; (80009b0 <MX_GPIO_Init+0x230>)
 80008fe:	f000 fced 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000914:	2305      	movs	r3, #5
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4824      	ldr	r0, [pc, #144]	; (80009b0 <MX_GPIO_Init+0x230>)
 8000920:	f000 fcdc 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : red_taylorsversion_Pin blue1989_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = red_taylorsversion_Pin|blue1989_Pin|Audio_RST_Pin;
 8000924:	f24c 0310 	movw	r3, #49168	; 0xc010
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	481a      	ldr	r0, [pc, #104]	; (80009a8 <MX_GPIO_Init+0x228>)
 800093e:	f000 fccd 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000942:	2320      	movs	r3, #32
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_GPIO_Init+0x228>)
 8000956:	f000 fcc1 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800095a:	2302      	movs	r3, #2
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800095e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x220>)
 8000970:	f000 fcb4 	bl	80012dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2006      	movs	r0, #6
 800097a:	f000 fc78 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800097e:	2006      	movs	r0, #6
 8000980:	f000 fc91 	bl	80012a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2017      	movs	r0, #23
 800098a:	f000 fc70 	bl	800126e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800098e:	2017      	movs	r0, #23
 8000990:	f000 fc89 	bl	80012a6 <HAL_NVIC_EnableIRQ>

}
 8000994:	bf00      	nop
 8000996:	3730      	adds	r7, #48	; 0x30
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <emirhan>:

/* USER CODE BEGIN 4 */
void emirhan(){
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
	i=0;
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <emirhan+0xc4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	j=0;
 80009c0:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <emirhan+0xc8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
	while(i<9){
 80009c6:	e021      	b.n	8000a0c <emirhan+0x58>
		if(apple[i][j]==name[j]){
 80009c8:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <emirhan+0xc4>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <emirhan+0xc8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	492b      	ldr	r1, [pc, #172]	; (8000a80 <emirhan+0xcc>)
 80009d2:	0092      	lsls	r2, r2, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80009da:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <emirhan+0xc8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4929      	ldr	r1, [pc, #164]	; (8000a84 <emirhan+0xd0>)
 80009e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d105      	bne.n	80009f4 <emirhan+0x40>
			j++;
 80009e8:	4b24      	ldr	r3, [pc, #144]	; (8000a7c <emirhan+0xc8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <emirhan+0xc8>)
 80009f0:	6013      	str	r3, [r2, #0]
 80009f2:	e007      	b.n	8000a04 <emirhan+0x50>
		}
		else{
			i++;
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <emirhan+0xc4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <emirhan+0xc4>)
 80009fc:	6013      	str	r3, [r2, #0]
			j=0;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <emirhan+0xc8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
		}
		if(j==4){
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <emirhan+0xc8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d004      	beq.n	8000a16 <emirhan+0x62>
	while(i<9){
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <emirhan+0xc4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b08      	cmp	r3, #8
 8000a12:	ddd9      	ble.n	80009c8 <emirhan+0x14>
 8000a14:	e000      	b.n	8000a18 <emirhan+0x64>
			break;
 8000a16:	bf00      	nop
		}
	}
	if(press==4 || finito){
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <emirhan+0xd4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d003      	beq.n	8000a28 <emirhan+0x74>
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <emirhan+0xd8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d023      	beq.n	8000a70 <emirhan+0xbc>
		press=0;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <emirhan+0xd4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t*)gsahinpi[i], (uint16_t)strlen(gsahinpi[i]));
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <emirhan+0xc4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <emirhan+0xdc>)
 8000a34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <emirhan+0xc4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <emirhan+0xdc>)
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fbc0 	bl	80001c8 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4620      	mov	r0, r4
 8000a50:	f007 fb80 	bl	8008154 <CDC_Transmit_FS>
		for(int u=0;u<4;u++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	e007      	b.n	8000a6a <emirhan+0xb6>
			name[u]=0;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <emirhan+0xd0>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int u=0;u<4;u++)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	ddf4      	ble.n	8000a5a <emirhan+0xa6>
		}
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	20000320 	.word	0x20000320
 8000a7c:	20000324 	.word	0x20000324
 8000a80:	20000000 	.word	0x20000000
 8000a84:	2000030c 	.word	0x2000030c
 8000a88:	2000031c 	.word	0x2000031c
 8000a8c:	20000328 	.word	0x20000328
 8000a90:	20000090 	.word	0x20000090

08000a94 <kontrol>:
void kontrol(uint32_t button){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(button<300 && button>50){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000aa2:	d21a      	bcs.n	8000ada <kontrol+0x46>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b32      	cmp	r3, #50	; 0x32
 8000aa8:	d917      	bls.n	8000ada <kontrol+0x46>
		HAL_GPIO_WritePin(GPIOD,red_taylorsversion_Pin,0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab0:	481e      	ldr	r0, [pc, #120]	; (8000b2c <kontrol+0x98>)
 8000ab2:	f000 fdc7 	bl	8001644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,blue1989_Pin,1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000abc:	481b      	ldr	r0, [pc, #108]	; (8000b2c <kontrol+0x98>)
 8000abe:	f000 fdc1 	bl	8001644 <HAL_GPIO_WritePin>
		name[press]=shortt;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <kontrol+0x9c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <kontrol+0xa0>)
 8000ac8:	2102      	movs	r1, #2
 8000aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		press++;
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <kontrol+0x9c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <kontrol+0x9c>)
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e01a      	b.n	8000b10 <kontrol+0x7c>
	}
	else if(button>299){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ae0:	d316      	bcc.n	8000b10 <kontrol+0x7c>
		HAL_GPIO_WritePin(GPIOD,blue1989_Pin,0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae8:	4810      	ldr	r0, [pc, #64]	; (8000b2c <kontrol+0x98>)
 8000aea:	f000 fdab 	bl	8001644 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,red_taylorsversion_Pin,1);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <kontrol+0x98>)
 8000af6:	f000 fda5 	bl	8001644 <HAL_GPIO_WritePin>
		name[press]=longg;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <kontrol+0x9c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <kontrol+0xa0>)
 8000b00:	2107      	movs	r1, #7
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		press++;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <kontrol+0x9c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <kontrol+0x9c>)
 8000b0e:	6013      	str	r3, [r2, #0]
	}
	if(press==4 || finito)
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <kontrol+0x9c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d003      	beq.n	8000b20 <kontrol+0x8c>
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <kontrol+0xa4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <kontrol+0x90>
		emirhan();
 8000b20:	f7ff ff48 	bl	80009b4 <emirhan>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	2000031c 	.word	0x2000031c
 8000b34:	2000030c 	.word	0x2000030c
 8000b38:	20000328 	.word	0x20000328

08000b3c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==button_Pin){
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d122      	bne.n	8000b92 <HAL_GPIO_EXTI_Callback+0x56>
		finito=0;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOA,button_Pin)){
 8000b52:	2101      	movs	r1, #1
 8000b54:	4819      	ldr	r0, [pc, #100]	; (8000bbc <HAL_GPIO_EXTI_Callback+0x80>)
 8000b56:	f000 fd5d 	bl	8001614 <HAL_GPIO_ReadPin>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00f      	beq.n	8000b80 <HAL_GPIO_EXTI_Callback+0x44>
			TIM6->CNT=0;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOD,blue1989_Pin,0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6c:	4815      	ldr	r0, [pc, #84]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b6e:	f000 fd69 	bl	8001644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,red_taylorsversion_Pin,0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b7a:	f000 fd63 	bl	8001644 <HAL_GPIO_WritePin>
 8000b7e:	e008      	b.n	8000b92 <HAL_GPIO_EXTI_Callback+0x56>
		}
		else
		{
			count=TIM6->CNT;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b86:	6013      	str	r3, [r2, #0]
			kontrol(count);
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff81 	bl	8000a94 <kontrol>

		}
	}
	if(GPIO_Pin==finito_Pin){
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	2b20      	cmp	r3, #32
 8000b96:	d10b      	bne.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x74>

		if(HAL_GPIO_ReadPin(GPIOE, finito_Pin))
 8000b98:	2120      	movs	r1, #32
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x90>)
 8000b9c:	f000 fd3a 	bl	8001614 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x74>
		{    	finito=1;
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
		    emirhan();
 8000bac:	f7ff ff02 	bl	80009b4 <emirhan>
	}
	}

 }
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000328 	.word	0x20000328
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40001000 	.word	0x40001000
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	20000308 	.word	0x20000308
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 fb1c 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <HAL_I2C_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12c      	bne.n	8000ca8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c70:	2312      	movs	r3, #18
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <HAL_I2C_MspInit+0x8c>)
 8000c88:	f000 fb28 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08e      	sub	sp, #56	; 0x38
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a31      	ldr	r2, [pc, #196]	; (8000dac <HAL_I2S_MspInit+0xf0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d15a      	bne.n	8000da2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cec:	2301      	movs	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cf0:	23c0      	movs	r3, #192	; 0xc0
 8000cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 f9b9 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d08:	f7ff ff62 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_I2S_MspInit+0xf4>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d60:	2310      	movs	r3, #16
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d70:	2306      	movs	r3, #6
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <HAL_I2S_MspInit+0xf8>)
 8000d7c:	f000 faae 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d80:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d92:	2306      	movs	r3, #6
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4806      	ldr	r0, [pc, #24]	; (8000db8 <HAL_I2S_MspInit+0xfc>)
 8000d9e:	f000 fa9d 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40003c00 	.word	0x40003c00
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40020800 	.word	0x40020800

08000dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_SPI_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12b      	bne.n	8000e36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_SPI_MspInit+0x88>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_SPI_MspInit+0x88>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_SPI_MspInit+0x88>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_SPI_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_SPI_MspInit+0x88>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e16:	23e0      	movs	r3, #224	; 0xe0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e26:	2305      	movs	r3, #5
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_SPI_MspInit+0x8c>)
 8000e32:	f000 fa53 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40013000 	.word	0x40013000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <HAL_TIM_Base_MspInit+0x3c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_TIM_Base_MspInit+0x40>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_TIM_Base_MspInit+0x40>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_TIM_Base_MspInit+0x40>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40001000 	.word	0x40001000
 8000e8c:	40023800 	.word	0x40023800

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f8a8 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fbc5 	bl	8001678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(finito_Pin);
 8000ef6:	2020      	movs	r0, #32
 8000ef8:	f000 fbbe 	bl	8001678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <OTG_FS_IRQHandler+0x10>)
 8000f06:	f001 fb03 	bl	8002510 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20001810 	.word	0x20001810

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f007 fd5f 	bl	8008a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fab7 	bl	80004dc <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8000f7c:	08008b2c 	.word	0x08008b2c
  ldr r2, =_sbss
 8000f80:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000f84:	20001f3c 	.word	0x20001f3c

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f94f 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe0c 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f967 	bl	80012c2 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f92f 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000b4 	.word	0x200000b4
 8001028:	200000bc 	.word	0x200000bc
 800102c:	200000b8 	.word	0x200000b8

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	200000bc 	.word	0x200000bc
 8001054:	2000032c 	.word	0x2000032c

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000032c 	.word	0x2000032c

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000bc 	.word	0x200000bc

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff29 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff3e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff8e 	bl	80011ac <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5d 	bl	8001158 <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff31 	bl	800111c <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e16b      	b.n	80015d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f8:	2201      	movs	r2, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	f040 815a 	bne.w	80015ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d005      	beq.n	800132e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132a:	2b02      	cmp	r3, #2
 800132c:	d130      	bne.n	8001390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	091b      	lsrs	r3, r3, #4
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b03      	cmp	r3, #3
 800139a:	d017      	beq.n	80013cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d123      	bne.n	8001420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	08da      	lsrs	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3208      	adds	r2, #8
 80013e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	220f      	movs	r2, #15
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	69b9      	ldr	r1, [r7, #24]
 800141c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80b4 	beq.w	80015ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <HAL_GPIO_Init+0x30c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a5f      	ldr	r2, [pc, #380]	; (80015e8 <HAL_GPIO_Init+0x30c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b5d      	ldr	r3, [pc, #372]	; (80015e8 <HAL_GPIO_Init+0x30c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800147e:	4a5b      	ldr	r2, [pc, #364]	; (80015ec <HAL_GPIO_Init+0x310>)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_GPIO_Init+0x314>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d02b      	beq.n	8001502 <HAL_GPIO_Init+0x226>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <HAL_GPIO_Init+0x318>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x222>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a50      	ldr	r2, [pc, #320]	; (80015f8 <HAL_GPIO_Init+0x31c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x21e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4f      	ldr	r2, [pc, #316]	; (80015fc <HAL_GPIO_Init+0x320>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x21a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4e      	ldr	r2, [pc, #312]	; (8001600 <HAL_GPIO_Init+0x324>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x216>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4d      	ldr	r2, [pc, #308]	; (8001604 <HAL_GPIO_Init+0x328>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x212>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	; (8001608 <HAL_GPIO_Init+0x32c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x20e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_GPIO_Init+0x330>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x20a>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00e      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014e6:	2308      	movs	r3, #8
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x228>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x228>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_GPIO_Init+0x310>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_GPIO_Init+0x334>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a32      	ldr	r2, [pc, #200]	; (8001610 <HAL_GPIO_Init+0x334>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_GPIO_Init+0x334>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_GPIO_Init+0x334>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <HAL_GPIO_Init+0x334>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159a:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_GPIO_Init+0x334>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_GPIO_Init+0x334>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <HAL_GPIO_Init+0x334>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae90 	bls.w	80012f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40021c00 	.word	0x40021c00
 8001610:	40013c00 	.word	0x40013c00

08001614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e001      	b.n	8001636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fa50 	bl	8000b3c <HAL_GPIO_EXTI_Callback>
  }
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e12b      	b.n	8001912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff faac 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	; 0x24
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800170a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800170c:	f002 fc9e 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8001710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a81      	ldr	r2, [pc, #516]	; (800191c <HAL_I2C_Init+0x274>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d807      	bhi.n	800172c <HAL_I2C_Init+0x84>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4a80      	ldr	r2, [pc, #512]	; (8001920 <HAL_I2C_Init+0x278>)
 8001720:	4293      	cmp	r3, r2
 8001722:	bf94      	ite	ls
 8001724:	2301      	movls	r3, #1
 8001726:	2300      	movhi	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	e006      	b.n	800173a <HAL_I2C_Init+0x92>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4a7d      	ldr	r2, [pc, #500]	; (8001924 <HAL_I2C_Init+0x27c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	bf94      	ite	ls
 8001734:	2301      	movls	r3, #1
 8001736:	2300      	movhi	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0e7      	b.n	8001912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a78      	ldr	r2, [pc, #480]	; (8001928 <HAL_I2C_Init+0x280>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0c9b      	lsrs	r3, r3, #18
 800174c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	430a      	orrs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a6a      	ldr	r2, [pc, #424]	; (800191c <HAL_I2C_Init+0x274>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d802      	bhi.n	800177c <HAL_I2C_Init+0xd4>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3301      	adds	r3, #1
 800177a:	e009      	b.n	8001790 <HAL_I2C_Init+0xe8>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	4a69      	ldr	r2, [pc, #420]	; (800192c <HAL_I2C_Init+0x284>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	3301      	adds	r3, #1
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	430b      	orrs	r3, r1
 8001796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	495c      	ldr	r1, [pc, #368]	; (800191c <HAL_I2C_Init+0x274>)
 80017ac:	428b      	cmp	r3, r1
 80017ae:	d819      	bhi.n	80017e4 <HAL_I2C_Init+0x13c>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e59      	subs	r1, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80017be:	1c59      	adds	r1, r3, #1
 80017c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017c4:	400b      	ands	r3, r1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00a      	beq.n	80017e0 <HAL_I2C_Init+0x138>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1e59      	subs	r1, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017de:	e051      	b.n	8001884 <HAL_I2C_Init+0x1dc>
 80017e0:	2304      	movs	r3, #4
 80017e2:	e04f      	b.n	8001884 <HAL_I2C_Init+0x1dc>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d111      	bne.n	8001810 <HAL_I2C_Init+0x168>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1e58      	subs	r0, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	440b      	add	r3, r1
 80017fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	e012      	b.n	8001836 <HAL_I2C_Init+0x18e>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1e58      	subs	r0, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6859      	ldr	r1, [r3, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	0099      	lsls	r1, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	fbb0 f3f3 	udiv	r3, r0, r3
 8001826:	3301      	adds	r3, #1
 8001828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_I2C_Init+0x196>
 800183a:	2301      	movs	r3, #1
 800183c:	e022      	b.n	8001884 <HAL_I2C_Init+0x1dc>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10e      	bne.n	8001864 <HAL_I2C_Init+0x1bc>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e58      	subs	r0, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6859      	ldr	r1, [r3, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	440b      	add	r3, r1
 8001854:	fbb0 f3f3 	udiv	r3, r0, r3
 8001858:	3301      	adds	r3, #1
 800185a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001862:	e00f      	b.n	8001884 <HAL_I2C_Init+0x1dc>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1e58      	subs	r0, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	0099      	lsls	r1, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	fbb0 f3f3 	udiv	r3, r0, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	6809      	ldr	r1, [r1, #0]
 8001888:	4313      	orrs	r3, r2
 800188a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6911      	ldr	r1, [r2, #16]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68d2      	ldr	r2, [r2, #12]
 80018be:	4311      	orrs	r1, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	000186a0 	.word	0x000186a0
 8001920:	001e847f 	.word	0x001e847f
 8001924:	003d08ff 	.word	0x003d08ff
 8001928:	431bde83 	.word	0x431bde83
 800192c:	10624dd3 	.word	0x10624dd3

08001930 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e128      	b.n	8001b94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a90      	ldr	r2, [pc, #576]	; (8001b9c <HAL_I2S_Init+0x26c>)
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff f9ad 	bl	8000cbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2202      	movs	r2, #2
 8001966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001978:	f023 030f 	bic.w	r3, r3, #15
 800197c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2202      	movs	r2, #2
 8001984:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d060      	beq.n	8001a50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d102      	bne.n	800199c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001996:	2310      	movs	r3, #16
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e001      	b.n	80019a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800199c:	2320      	movs	r3, #32
 800199e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d802      	bhi.n	80019ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f002 fc42 	bl	8004238 <HAL_RCCEx_GetPeriphCLKFreq>
 80019b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019be:	d125      	bne.n	8001a0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	3305      	adds	r3, #5
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e01f      	b.n	8001a2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	3305      	adds	r3, #5
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e00e      	b.n	8001a2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	3305      	adds	r3, #5
 8001a28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ba0 <HAL_I2S_Init+0x270>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	08db      	lsrs	r3, r3, #3
 8001a34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	e003      	b.n	8001a58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d902      	bls.n	8001a64 <HAL_I2S_Init+0x134>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d907      	bls.n	8001a74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0210 	orr.w	r2, r3, #16
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e08f      	b.n	8001b94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	ea42 0103 	orr.w	r1, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a92:	f023 030f 	bic.w	r3, r3, #15
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6851      	ldr	r1, [r2, #4]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6892      	ldr	r2, [r2, #8]
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68d2      	ldr	r2, [r2, #12]
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6992      	ldr	r2, [r2, #24]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d161      	bne.n	8001b84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_I2S_Init+0x274>)
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <HAL_I2S_Init+0x278>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2S_Init+0x1a4>
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_I2S_Init+0x27c>)
 8001ad2:	e001      	b.n	8001ad8 <HAL_I2S_Init+0x1a8>
 8001ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	4932      	ldr	r1, [pc, #200]	; (8001ba8 <HAL_I2S_Init+0x278>)
 8001ae0:	428a      	cmp	r2, r1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2S_Init+0x1b8>
 8001ae4:	4a31      	ldr	r2, [pc, #196]	; (8001bac <HAL_I2S_Init+0x27c>)
 8001ae6:	e001      	b.n	8001aec <HAL_I2S_Init+0x1bc>
 8001ae8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001aec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001af0:	f023 030f 	bic.w	r3, r3, #15
 8001af4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_I2S_Init+0x278>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_I2S_Init+0x1d4>
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_I2S_Init+0x27c>)
 8001b02:	e001      	b.n	8001b08 <HAL_I2S_Init+0x1d8>
 8001b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b08:	2202      	movs	r2, #2
 8001b0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_I2S_Init+0x278>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_I2S_Init+0x1ea>
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_I2S_Init+0x27c>)
 8001b18:	e001      	b.n	8001b1e <HAL_I2S_Init+0x1ee>
 8001b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2a:	d003      	beq.n	8001b34 <HAL_I2S_Init+0x204>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	e001      	b.n	8001b40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	897b      	ldrh	r3, [r7, #10]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <HAL_I2S_Init+0x278>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_I2S_Init+0x24c>
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_I2S_Init+0x27c>)
 8001b7a:	e001      	b.n	8001b80 <HAL_I2S_Init+0x250>
 8001b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b80:	897a      	ldrh	r2, [r7, #10]
 8001b82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	08001ca7 	.word	0x08001ca7
 8001ba0:	cccccccd 	.word	0xcccccccd
 8001ba4:	08001dbd 	.word	0x08001dbd
 8001ba8:	40003800 	.word	0x40003800
 8001bac:	40003400 	.word	0x40003400

08001bb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	881a      	ldrh	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c9a      	adds	r2, r3, #2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffb8 	bl	8001bb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	b292      	uxth	r2, r2
 8001c5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	1c9a      	adds	r2, r3, #2
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10e      	bne.n	8001c9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff93 	bl	8001bc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d13a      	bne.n	8001d38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d109      	bne.n	8001ce0 <I2S_IRQHandler+0x3a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	d102      	bne.n	8001ce0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffb4 	bl	8001c48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce6:	2b40      	cmp	r3, #64	; 0x40
 8001ce8:	d126      	bne.n	8001d38 <I2S_IRQHandler+0x92>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d11f      	bne.n	8001d38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ff50 	bl	8001bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d136      	bne.n	8001db2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d109      	bne.n	8001d62 <I2S_IRQHandler+0xbc>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d58:	2b80      	cmp	r3, #128	; 0x80
 8001d5a:	d102      	bne.n	8001d62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff45 	bl	8001bec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d122      	bne.n	8001db2 <I2S_IRQHandler+0x10c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d11b      	bne.n	8001db2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f043 0204 	orr.w	r2, r3, #4
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff13 	bl	8001bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a92      	ldr	r2, [pc, #584]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d101      	bne.n	8001dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001dd6:	4b92      	ldr	r3, [pc, #584]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dd8:	e001      	b.n	8001dde <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8b      	ldr	r2, [pc, #556]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001df4:	4b8a      	ldr	r3, [pc, #552]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001df6:	e001      	b.n	8001dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e08:	d004      	beq.n	8001e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 8099 	bne.w	8001f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d107      	bne.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f925 	bl	8002078 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f9c8 	bl	80021d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d13a      	bne.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d035      	beq.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e66:	4b6e      	ldr	r3, [pc, #440]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e68:	e001      	b.n	8001e6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4969      	ldr	r1, [pc, #420]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e76:	428b      	cmp	r3, r1
 8001e78:	d101      	bne.n	8001e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e7a:	4b69      	ldr	r3, [pc, #420]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e7c:	e001      	b.n	8001e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0202 	orr.w	r2, r3, #2
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fe88 	bl	8001bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	f040 80c3 	bne.w	800205a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80bd 	beq.w	800205a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001eee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001efa:	4b49      	ldr	r3, [pc, #292]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001efc:	e001      	b.n	8001f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4944      	ldr	r1, [pc, #272]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001f0e:	4b44      	ldr	r3, [pc, #272]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f10:	e001      	b.n	8001f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f1a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f043 0204 	orr.w	r2, r3, #4
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fe4a 	bl	8001bd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f44:	e089      	b.n	800205a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d107      	bne.n	8001f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8be 	bl	80020dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8fd 	bl	8002174 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d12f      	bne.n	8001fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d02a      	beq.n	8001fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f9c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d101      	bne.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001faa:	e001      	b.n	8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4919      	ldr	r1, [pc, #100]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fb8:	428b      	cmp	r3, r1
 8001fba:	d101      	bne.n	8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fbe:	e001      	b.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fdfa 	bl	8001bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d136      	bne.n	800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d031      	beq.n	800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002004:	e001      	b.n	800200a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4902      	ldr	r1, [pc, #8]	; (800201c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002012:	428b      	cmp	r3, r1
 8002014:	d106      	bne.n	8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002016:	4b02      	ldr	r3, [pc, #8]	; (8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002018:	e006      	b.n	8002028 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800201a:	bf00      	nop
 800201c:	40003800 	.word	0x40003800
 8002020:	40003400 	.word	0x40003400
 8002024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800202c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800203c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f043 0204 	orr.w	r2, r3, #4
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fdc0 	bl	8001bd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002058:	e000      	b.n	800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800205a:	bf00      	nop
}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c99      	adds	r1, r3, #2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6251      	str	r1, [r2, #36]	; 0x24
 800208a:	881a      	ldrh	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d113      	bne.n	80020d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ffc9 	bl	8002064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1c99      	adds	r1, r3, #2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6251      	str	r1, [r2, #36]	; 0x24
 80020ee:	8819      	ldrh	r1, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <I2SEx_TxISR_I2SExt+0x90>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <I2SEx_TxISR_I2SExt+0x22>
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <I2SEx_TxISR_I2SExt+0x94>)
 80020fc:	e001      	b.n	8002102 <I2SEx_TxISR_I2SExt+0x26>
 80020fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002102:	460a      	mov	r2, r1
 8002104:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d121      	bne.n	8002162 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <I2SEx_TxISR_I2SExt+0x90>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <I2SEx_TxISR_I2SExt+0x50>
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <I2SEx_TxISR_I2SExt+0x94>)
 800212a:	e001      	b.n	8002130 <I2SEx_TxISR_I2SExt+0x54>
 800212c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <I2SEx_TxISR_I2SExt+0x90>)
 8002138:	428b      	cmp	r3, r1
 800213a:	d101      	bne.n	8002140 <I2SEx_TxISR_I2SExt+0x64>
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <I2SEx_TxISR_I2SExt+0x94>)
 800213e:	e001      	b.n	8002144 <I2SEx_TxISR_I2SExt+0x68>
 8002140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002148:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff81 	bl	8002064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40003800 	.word	0x40003800
 8002170:	40003400 	.word	0x40003400

08002174 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68d8      	ldr	r0, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	1c99      	adds	r1, r3, #2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800218c:	b282      	uxth	r2, r0
 800218e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d113      	bne.n	80021d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ff4a 	bl	8002064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a20      	ldr	r2, [pc, #128]	; (8002268 <I2SEx_RxISR_I2SExt+0x90>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <I2SEx_RxISR_I2SExt+0x16>
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <I2SEx_RxISR_I2SExt+0x94>)
 80021ec:	e001      	b.n	80021f2 <I2SEx_RxISR_I2SExt+0x1a>
 80021ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f2:	68d8      	ldr	r0, [r3, #12]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	1c99      	adds	r1, r3, #2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021fe:	b282      	uxth	r2, r0
 8002200:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d121      	bne.n	800225e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <I2SEx_RxISR_I2SExt+0x90>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <I2SEx_RxISR_I2SExt+0x50>
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <I2SEx_RxISR_I2SExt+0x94>)
 8002226:	e001      	b.n	800222c <I2SEx_RxISR_I2SExt+0x54>
 8002228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <I2SEx_RxISR_I2SExt+0x90>)
 8002234:	428b      	cmp	r3, r1
 8002236:	d101      	bne.n	800223c <I2SEx_RxISR_I2SExt+0x64>
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <I2SEx_RxISR_I2SExt+0x94>)
 800223a:	e001      	b.n	8002240 <I2SEx_RxISR_I2SExt+0x68>
 800223c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002240:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002244:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff03 	bl	8002064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40003800 	.word	0x40003800
 800226c:	40003400 	.word	0x40003400

08002270 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002272:	b08f      	sub	sp, #60	; 0x3c
 8002274:	af0a      	add	r7, sp, #40	; 0x28
 8002276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e10f      	b.n	80024a2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f006 f8a1 	bl	80083e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fb88 	bl	80049d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	687e      	ldr	r6, [r7, #4]
 80022ce:	466d      	mov	r5, sp
 80022d0:	f106 0410 	add.w	r4, r6, #16
 80022d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e4:	1d33      	adds	r3, r6, #4
 80022e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e8:	6838      	ldr	r0, [r7, #0]
 80022ea:	f002 fa5f 	bl	80047ac <USB_CoreInit>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d0      	b.n	80024a2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f002 fb76 	bl	80049f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	e04a      	b.n	80023a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	333d      	adds	r3, #61	; 0x3d
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	333c      	adds	r3, #60	; 0x3c
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b298      	uxth	r0, r3
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	3344      	adds	r3, #68	; 0x44
 800234e:	4602      	mov	r2, r0
 8002350:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3340      	adds	r3, #64	; 0x40
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002366:	7bfa      	ldrb	r2, [r7, #15]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3348      	adds	r3, #72	; 0x48
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	334c      	adds	r3, #76	; 0x4c
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3354      	adds	r3, #84	; 0x54
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3301      	adds	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3af      	bcc.n	8002312 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	3301      	adds	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d3b5      	bcc.n	80023b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	687e      	ldr	r6, [r7, #4]
 8002454:	466d      	mov	r5, sp
 8002456:	f106 0410 	add.w	r4, r6, #16
 800245a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800245c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002462:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002466:	e885 0003 	stmia.w	r5, {r0, r1}
 800246a:	1d33      	adds	r3, r6, #4
 800246c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246e:	6838      	ldr	r0, [r7, #0]
 8002470:	f002 fb0e 	bl	8004a90 <USB_DevInit>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e00d      	b.n	80024a2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fc5d 	bl	8005d5a <USB_DevDisconnect>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_Start+0x1c>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e020      	b.n	8002508 <HAL_PCD_Start+0x5e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d109      	bne.n	80024ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d005      	beq.n	80024ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fa60 	bl	80049b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fc0d 	bl	8005d18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b08d      	sub	sp, #52	; 0x34
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 fccb 	bl	8005ec2 <USB_GetMode>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 848a 	bne.w	8002e48 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 fc2f 	bl	8005d9c <USB_ReadInterrupts>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8480 	beq.w	8002e46 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fc1c 	bl	8005d9c <USB_ReadInterrupts>
 8002564:	4603      	mov	r3, r0
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f002 0202 	and.w	r2, r2, #2
 800257c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fc0a 	bl	8005d9c <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b10      	cmp	r3, #16
 8002590:	d161      	bne.n	8002656 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0210 	bic.w	r2, r2, #16
 80025a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f003 020f 	and.w	r2, r3, #15
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	0c5b      	lsrs	r3, r3, #17
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d124      	bne.n	8002618 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d035      	beq.n	8002646 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6a38      	ldr	r0, [r7, #32]
 80025ee:	f003 fa41 	bl	8005a74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fe:	441a      	add	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002610:	441a      	add	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	621a      	str	r2, [r3, #32]
 8002616:	e016      	b.n	8002646 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	0c5b      	lsrs	r3, r3, #17
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	2b06      	cmp	r3, #6
 8002622:	d110      	bne.n	8002646 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800262a:	2208      	movs	r2, #8
 800262c:	4619      	mov	r1, r3
 800262e:	6a38      	ldr	r0, [r7, #32]
 8002630:	f003 fa20 	bl	8005a74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002640:	441a      	add	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0210 	orr.w	r2, r2, #16
 8002654:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f003 fb9e 	bl	8005d9c <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002666:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800266a:	f040 80a7 	bne.w	80027bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fba3 	bl	8005dc2 <USB_ReadDevAllOutEpInterrupt>
 800267c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800267e:	e099      	b.n	80027b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 808e 	beq.w	80027a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fbc7 	bl	8005e2a <USB_ReadDevOutEPInterrupt>
 800269c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00c      	beq.n	80026c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b4:	461a      	mov	r2, r3
 80026b6:	2301      	movs	r3, #1
 80026b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fec3 	bl	8003448 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d8:	461a      	mov	r2, r3
 80026da:	2308      	movs	r3, #8
 80026dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 ff99 	bl	8003618 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fc:	461a      	mov	r2, r3
 80026fe:	2310      	movs	r3, #16
 8002700:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d030      	beq.n	800276e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b80      	cmp	r3, #128	; 0x80
 8002716:	d109      	bne.n	800272c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800272c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	78db      	ldrb	r3, [r3, #3]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d108      	bne.n	800275c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2200      	movs	r2, #0
 800274e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	b2db      	uxtb	r3, r3
 8002754:	4619      	mov	r1, r3
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f005 ff58 	bl	800860c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002768:	461a      	mov	r2, r3
 800276a:	2302      	movs	r3, #2
 800276c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	2320      	movs	r3, #32
 8002788:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3301      	adds	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f47f af62 	bne.w	8002680 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 faeb 	bl	8005d9c <USB_ReadInterrupts>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027d0:	f040 80db 	bne.w	800298a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 fb0c 	bl	8005df6 <USB_ReadDevAllInEpInterrupt>
 80027de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027e4:	e0cd      	b.n	8002982 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80c2 	beq.w	8002976 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fb32 	bl	8005e66 <USB_ReadDevInEPInterrupt>
 8002802:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d057      	beq.n	80028be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	2201      	movs	r2, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	69f9      	ldr	r1, [r7, #28]
 800282a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800282e:	4013      	ands	r3, r2
 8002830:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800283e:	461a      	mov	r2, r3
 8002840:	2301      	movs	r3, #1
 8002842:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d132      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	334c      	adds	r3, #76	; 0x4c
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002862:	4613      	mov	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4403      	add	r3, r0
 800286c:	3348      	adds	r3, #72	; 0x48
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4419      	add	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4403      	add	r3, r0
 8002880:	334c      	adds	r3, #76	; 0x4c
 8002882:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x3a2>
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3354      	adds	r3, #84	; 0x54
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d108      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028aa:	461a      	mov	r2, r3
 80028ac:	2101      	movs	r1, #1
 80028ae:	f003 fb39 	bl	8005f24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f005 fe22 	bl	8008502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d4:	461a      	mov	r2, r3
 80028d6:	2308      	movs	r3, #8
 80028d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f0:	461a      	mov	r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290c:	461a      	mov	r2, r3
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800291c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291e:	6a38      	ldr	r0, [r7, #32]
 8002920:	f002 fa1a 	bl	8004d58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	3338      	adds	r3, #56	; 0x38
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	3304      	adds	r3, #4
 8002936:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	78db      	ldrb	r3, [r3, #3]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d108      	bne.n	8002952 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f005 fe6f 	bl	8008630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800295e:	461a      	mov	r2, r3
 8002960:	2302      	movs	r3, #2
 8002962:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800296e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fcdb 	bl	800332c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f af2e 	bne.w	80027e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fa04 	bl	8005d9c <USB_ReadInterrupts>
 8002994:	4603      	mov	r3, r0
 8002996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800299a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800299e:	d122      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fec3 	bl	8003754 <HAL_PCDEx_LPM_Callback>
 80029ce:	e002      	b.n	80029d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f005 fe0d 	bl	80085f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 f9d6 	bl	8005d9c <USB_ReadInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fa:	d112      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d102      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f005 fdc9 	bl	80085a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a20:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 f9b8 	bl	8005d9c <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a36:	f040 80b7 	bne.w	8002ba8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2110      	movs	r1, #16
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 f97f 	bl	8004d58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5e:	e046      	b.n	8002aee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a84:	0151      	lsls	r1, r2, #5
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	440a      	add	r2, r1
 8002a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aa6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab8:	0151      	lsls	r1, r2, #5
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	440a      	add	r2, r1
 8002abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ac6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ae6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	3301      	adds	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d3b3      	bcc.n	8002a60 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b24:	f043 030b 	orr.w	r3, r3, #11
 8002b28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3a:	f043 030b 	orr.w	r3, r3, #11
 8002b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b40:	e015      	b.n	8002b6e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b68:	f043 030b 	orr.w	r3, r3, #11
 8002b6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b92:	461a      	mov	r2, r3
 8002b94:	f003 f9c6 	bl	8005f24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 f8f5 	bl	8005d9c <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbc:	d124      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 f98b 	bl	8005ede <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 f940 	bl	8004e52 <USB_GetDevSpeed>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681c      	ldr	r4, [r3, #0]
 8002bde:	f001 fa29 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8002be2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	4620      	mov	r0, r4
 8002bee:	f001 fe3f 	bl	8004870 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f005 fcad 	bl	8008552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f8c5 	bl	8005d9c <USB_ReadInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d10a      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f005 fc8a 	bl	8008536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f002 0208 	and.w	r2, r2, #8
 8002c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 f8b0 	bl	8005d9c <USB_ReadInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b80      	cmp	r3, #128	; 0x80
 8002c44:	d122      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c52:	2301      	movs	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	e014      	b.n	8002c82 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb27 	bl	80032ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	3301      	adds	r3, #1
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d3e5      	bcc.n	8002c58 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 f883 	bl	8005d9c <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca0:	d13b      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	e02b      	b.n	8002d00 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3340      	adds	r3, #64	; 0x40
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d115      	bne.n	8002cfa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da12      	bge.n	8002cfa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	333f      	adds	r3, #63	; 0x3f
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fae8 	bl	80032ca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d3ce      	bcc.n	8002ca8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 f83c 	bl	8005d9c <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2e:	d155      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d30:	2301      	movs	r3, #1
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e045      	b.n	8002dc2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d12e      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da2b      	bge.n	8002dbc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d70:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d121      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db8:	6053      	str	r3, [r2, #4]
            break;
 8002dba:	e007      	b.n	8002dcc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d3b4      	bcc.n	8002d36 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 ffdb 	bl	8005d9c <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d10a      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f005 fc2e 	bl	8008654 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 ffc5 	bl	8005d9c <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d115      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f005 fc1e 	bl	8008670 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	e000      	b.n	8002e48 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e46:	bf00      	nop
    }
  }
}
 8002e48:	3734      	adds	r7, #52	; 0x34
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd90      	pop	{r4, r7, pc}

08002e4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_PCD_SetAddress+0x1a>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e013      	b.n	8002e90 <HAL_PCD_SetAddress+0x42>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 ff23 	bl	8005ccc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	70fb      	strb	r3, [r7, #3]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	803b      	strh	r3, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	da0f      	bge.n	8002ede <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	3338      	adds	r3, #56	; 0x38
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	705a      	strb	r2, [r3, #1]
 8002edc:	e00f      	b.n	8002efe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f0a:	883a      	ldrh	r2, [r7, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	78ba      	ldrb	r2, [r7, #2]
 8002f14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f28:	78bb      	ldrb	r3, [r7, #2]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d102      	bne.n	8002f34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_PCD_EP_Open+0xaa>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e00e      	b.n	8002f60 <HAL_PCD_EP_Open+0xc8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 ffa3 	bl	8004e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da0f      	bge.n	8002f9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3338      	adds	r3, #56	; 0x38
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	e00f      	b.n	8002fbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_EP_Close+0x6e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e00e      	b.n	8002ff4 <HAL_PCD_EP_Close+0x8c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 ffe1 	bl	8004fac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	460b      	mov	r3, r1
 800300a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800300c:	7afb      	ldrb	r3, [r7, #11]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	b2da      	uxtb	r2, r3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	f002 fac0 	bl	80055f4 <USB_EP0StartXfer>
 8003074:	e008      	b.n	8003088 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	f002 f86e 	bl	8005164 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030b4:	681b      	ldr	r3, [r3, #0]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	460b      	mov	r3, r1
 80030d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	3338      	adds	r3, #56	; 0x38
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2201      	movs	r2, #1
 8003100:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	b2da      	uxtb	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	f002 fa5e 	bl	80055f4 <USB_EP0StartXfer>
 8003138:	e008      	b.n	800314c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	f002 f80c 	bl	8005164 <USB_EPStartXfer>
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 020f 	and.w	r2, r3, #15
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d901      	bls.n	8003174 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e050      	b.n	8003216 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da0f      	bge.n	800319c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3338      	adds	r3, #56	; 0x38
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e00d      	b.n	80031b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_PCD_EP_SetStall+0x82>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e01e      	b.n	8003216 <HAL_PCD_EP_SetStall+0xc0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f002 fc9c 	bl	8005b24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	b2d9      	uxtb	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003206:	461a      	mov	r2, r3
 8003208:	f002 fe8c 	bl	8005f24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d901      	bls.n	800323c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e042      	b.n	80032c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800323c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003240:	2b00      	cmp	r3, #0
 8003242:	da0f      	bge.n	8003264 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	3338      	adds	r3, #56	; 0x38
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	3304      	adds	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	705a      	strb	r2, [r3, #1]
 8003262:	e00f      	b.n	8003284 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003264:	78fb      	ldrb	r3, [r7, #3]
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	3304      	adds	r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_PCD_EP_ClrStall+0x86>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e00e      	b.n	80032c2 <HAL_PCD_EP_ClrStall+0xa4>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f002 fca4 	bl	8005c00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	460b      	mov	r3, r1
 80032d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da0c      	bge.n	80032f8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	3338      	adds	r3, #56	; 0x38
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e00c      	b.n	8003312 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68f9      	ldr	r1, [r7, #12]
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fac3 	bl	80058a4 <USB_EPStopXfer>
 800331e:	4603      	mov	r3, r0
 8003320:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003322:	7afb      	ldrb	r3, [r7, #11]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	; 0x28
 8003330:	af02      	add	r7, sp, #8
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	3338      	adds	r3, #56	; 0x38
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1a      	ldr	r2, [r3, #32]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	429a      	cmp	r2, r3
 800335e:	d901      	bls.n	8003364 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e06c      	b.n	800343e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	429a      	cmp	r2, r3
 8003378:	d902      	bls.n	8003380 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3303      	adds	r3, #3
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003388:	e02b      	b.n	80033e2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	429a      	cmp	r2, r3
 800339e:	d902      	bls.n	80033a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3303      	adds	r3, #3
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6919      	ldr	r1, [r3, #16]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4603      	mov	r3, r0
 80033c4:	6978      	ldr	r0, [r7, #20]
 80033c6:	f002 fb17 	bl	80059f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	441a      	add	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d809      	bhi.n	800340c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1a      	ldr	r2, [r3, #32]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003400:	429a      	cmp	r2, r3
 8003402:	d203      	bcs.n	800340c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1be      	bne.n	800338a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	429a      	cmp	r2, r3
 8003416:	d811      	bhi.n	800343c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	2201      	movs	r2, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	43db      	mvns	r3, r3
 8003432:	6939      	ldr	r1, [r7, #16]
 8003434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003438:	4013      	ands	r3, r2
 800343a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	333c      	adds	r3, #60	; 0x3c
 8003460:	3304      	adds	r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d17b      	bne.n	8003576 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	4a61      	ldr	r2, [pc, #388]	; (8003610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	f240 80b9 	bls.w	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80b3 	beq.w	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b0:	6093      	str	r3, [r2, #8]
 80034b2:	e0a7      	b.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ca:	461a      	mov	r2, r3
 80034cc:	2320      	movs	r3, #32
 80034ce:	6093      	str	r3, [r2, #8]
 80034d0:	e098      	b.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f040 8093 	bne.w	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d90f      	bls.n	8003506 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	461a      	mov	r2, r3
 80034fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003502:	6093      	str	r3, [r2, #8]
 8003504:	e07e      	b.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	0159      	lsls	r1, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	440b      	add	r3, r1
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003532:	1ad2      	subs	r2, r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d114      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003550:	461a      	mov	r2, r3
 8003552:	2101      	movs	r1, #1
 8003554:	f002 fce6 	bl	8005f24 <USB_EP0_OutStart>
 8003558:	e006      	b.n	8003568 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f004 ffac 	bl	80084cc <HAL_PCD_DataOutStageCallback>
 8003574:	e046      	b.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d124      	bne.n	80035c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003594:	461a      	mov	r2, r3
 8003596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359a:	6093      	str	r3, [r2, #8]
 800359c:	e032      	b.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	2320      	movs	r3, #32
 80035b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f004 ff83 	bl	80084cc <HAL_PCD_DataOutStageCallback>
 80035c6:	e01d      	b.n	8003604 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d114      	bne.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035f0:	461a      	mov	r2, r3
 80035f2:	2100      	movs	r1, #0
 80035f4:	f002 fc96 	bl	8005f24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f004 ff64 	bl	80084cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	4f54300a 	.word	0x4f54300a
 8003614:	4f54310a 	.word	0x4f54310a

08003618 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	333c      	adds	r3, #60	; 0x3c
 8003630:	3304      	adds	r3, #4
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d90e      	bls.n	800366c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f004 ff1b 	bl	80084a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d90c      	bls.n	8003694 <PCD_EP_OutSetupPacket_int+0x7c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800368c:	461a      	mov	r2, r3
 800368e:	2101      	movs	r1, #1
 8003690:	f002 fc48 	bl	8005f24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	4f54300a 	.word	0x4f54300a

080036a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
 80036b0:	4613      	mov	r3, r2
 80036b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036c2:	883b      	ldrh	r3, [r7, #0]
 80036c4:	0419      	lsls	r1, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
 80036d0:	e028      	b.n	8003724 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	4413      	add	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e00d      	b.n	8003702 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3340      	adds	r3, #64	; 0x40
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4413      	add	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	7bfa      	ldrb	r2, [r7, #15]
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	3b01      	subs	r3, #1
 8003708:	429a      	cmp	r2, r3
 800370a:	d3ec      	bcc.n	80036e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800370c:	883b      	ldrh	r3, [r7, #0]
 800370e:	0418      	lsls	r0, r3, #16
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	3b01      	subs	r3, #1
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4302      	orrs	r2, r0
 800371c:	3340      	adds	r3, #64	; 0x40
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e267      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d075      	beq.n	8003876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800378a:	4b88      	ldr	r3, [pc, #544]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b04      	cmp	r3, #4
 8003794:	d00c      	beq.n	80037b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b85      	ldr	r3, [pc, #532]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d112      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b82      	ldr	r3, [pc, #520]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b0:	4b7e      	ldr	r3, [pc, #504]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d05b      	beq.n	8003874 <HAL_RCC_OscConfig+0x108>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d157      	bne.n	8003874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e242      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_OscConfig+0x74>
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a75      	ldr	r2, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e01d      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x98>
 80037ea:	4b70      	ldr	r3, [pc, #448]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6f      	ldr	r2, [pc, #444]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b6d      	ldr	r3, [pc, #436]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6c      	ldr	r2, [pc, #432]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0xb0>
 8003804:	4b69      	ldr	r3, [pc, #420]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a68      	ldr	r2, [pc, #416]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b66      	ldr	r3, [pc, #408]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a65      	ldr	r2, [pc, #404]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fd fc18 	bl	8001058 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382c:	f7fd fc14 	bl	8001058 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e207      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383e:	4b5b      	ldr	r3, [pc, #364]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0xc0>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fd fc04 	bl	8001058 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7fd fc00 	bl	8001058 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1f3      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003866:	4b51      	ldr	r3, [pc, #324]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0xe8>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d063      	beq.n	800394a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003882:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003896:	2b08      	cmp	r3, #8
 8003898:	d11c      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389a:	4b44      	ldr	r3, [pc, #272]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e1c7      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	e03a      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d020      	beq.n	800391e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCC_OscConfig+0x244>)
 80038de:	2201      	movs	r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd fbb9 	bl	8001058 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fd fbb5 	bl	8001058 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1a8      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4925      	ldr	r1, [pc, #148]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]
 800391c:	e015      	b.n	800394a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391e:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x244>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fd fb98 	bl	8001058 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800392c:	f7fd fb94 	bl	8001058 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e187      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d036      	beq.n	80039c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395e:	4b15      	ldr	r3, [pc, #84]	; (80039b4 <HAL_RCC_OscConfig+0x248>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fd fb78 	bl	8001058 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396c:	f7fd fb74 	bl	8001058 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e167      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x240>)
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x200>
 800398a:	e01b      	b.n	80039c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_OscConfig+0x248>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fd fb61 	bl	8001058 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003998:	e00e      	b.n	80039b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fd fb5d 	bl	8001058 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d907      	bls.n	80039b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e150      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
 80039ac:	40023800 	.word	0x40023800
 80039b0:	42470000 	.word	0x42470000
 80039b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ea      	bne.n	800399a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 8097 	beq.w	8003b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d6:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	4b7d      	ldr	r3, [pc, #500]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b7a      	ldr	r3, [pc, #488]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b77      	ldr	r3, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b74      	ldr	r3, [pc, #464]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a73      	ldr	r2, [pc, #460]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fb1d 	bl	8001058 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fd fb19 	bl	8001058 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e10c      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x474>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x2ea>
 8003a48:	4b64      	ldr	r3, [pc, #400]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a63      	ldr	r2, [pc, #396]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	e01c      	b.n	8003a90 <HAL_RCC_OscConfig+0x324>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x30c>
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a5e      	ldr	r2, [pc, #376]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 0304 	orr.w	r3, r3, #4
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	4b5c      	ldr	r3, [pc, #368]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	4a5b      	ldr	r2, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6713      	str	r3, [r2, #112]	; 0x70
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0x324>
 8003a78:	4b58      	ldr	r3, [pc, #352]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a57      	ldr	r2, [pc, #348]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a54      	ldr	r2, [pc, #336]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f023 0304 	bic.w	r3, r3, #4
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fd fade 	bl	8001058 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fada 	bl	8001058 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0cb      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x334>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fac8 	bl	8001058 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fd fac4 	bl	8001058 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0b5      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ee      	bne.n	8003acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	4a38      	ldr	r2, [pc, #224]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a1 	beq.w	8003c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b0a:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d05c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d141      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <HAL_RCC_OscConfig+0x478>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd fa98 	bl	8001058 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd fa94 	bl	8001058 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e087      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	019b      	lsls	r3, r3, #6
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	3b01      	subs	r3, #1
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	491b      	ldr	r1, [pc, #108]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_RCC_OscConfig+0x478>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fd fa6d 	bl	8001058 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fd fa69 	bl	8001058 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e05c      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x416>
 8003ba0:	e054      	b.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCC_OscConfig+0x478>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fa56 	bl	8001058 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd fa52 	bl	8001058 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e045      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_OscConfig+0x470>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x444>
 8003bce:	e03d      	b.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e038      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40007000 	.word	0x40007000
 8003be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x4ec>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d028      	beq.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d121      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d11a      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d111      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	3b01      	subs	r3, #1
 8003c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800

08003c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0cc      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b68      	ldr	r3, [pc, #416]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d90c      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d044      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d119      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e067      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4934      	ldr	r1, [pc, #208]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fd f984 	bl	8001058 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fd f980 	bl	8001058 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e04f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d20c      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dce:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	; (8003e20 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd f8e4 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023c00 	.word	0x40023c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	08008b04 	.word	0x08008b04
 8003e20:	200000b4 	.word	0x200000b4
 8003e24:	200000b8 	.word	0x200000b8

08003e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e2c:	b094      	sub	sp, #80	; 0x50
 8003e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
 8003e34:	2300      	movs	r3, #0
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e38:	2300      	movs	r3, #0
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e40:	4b79      	ldr	r3, [pc, #484]	; (8004028 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d00d      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x40>
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	f200 80e1 	bhi.w	8004014 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x34>
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d003      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e5a:	e0db      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b73      	ldr	r3, [pc, #460]	; (800402c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e60:	e0db      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e62:	4b73      	ldr	r3, [pc, #460]	; (8004030 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e66:	e0d8      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e68:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e72:	4b6d      	ldr	r3, [pc, #436]	; (8004028 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d063      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	2200      	movs	r2, #0
 8003e86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
 8003e92:	2300      	movs	r3, #0
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
 8003e96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	0159      	lsls	r1, r3, #5
 8003ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eac:	0150      	lsls	r0, r2, #5
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	1a51      	subs	r1, r2, r1
 8003eb6:	6139      	str	r1, [r7, #16]
 8003eb8:	4629      	mov	r1, r5
 8003eba:	eb63 0301 	sbc.w	r3, r3, r1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ecc:	4659      	mov	r1, fp
 8003ece:	018b      	lsls	r3, r1, #6
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	018a      	lsls	r2, r1, #6
 8003eda:	4651      	mov	r1, sl
 8003edc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003efa:	4690      	mov	r8, r2
 8003efc:	4699      	mov	r9, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	eb18 0303 	adds.w	r3, r8, r3
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	462b      	mov	r3, r5
 8003f08:	eb49 0303 	adc.w	r3, r9, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	024b      	lsls	r3, r1, #9
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f24:	4621      	mov	r1, r4
 8003f26:	024a      	lsls	r2, r1, #9
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2e:	2200      	movs	r2, #0
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f38:	f7fc f94e 	bl	80001d8 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f44:	e058      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f46:	4b38      	ldr	r3, [pc, #224]	; (8004028 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	4611      	mov	r1, r2
 8003f52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f56:	623b      	str	r3, [r7, #32]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	f04f 0000 	mov.w	r0, #0
 8003f68:	f04f 0100 	mov.w	r1, #0
 8003f6c:	0159      	lsls	r1, r3, #5
 8003f6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f72:	0150      	lsls	r0, r2, #5
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4641      	mov	r1, r8
 8003f7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f7e:	4649      	mov	r1, r9
 8003f80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f98:	ebb2 040a 	subs.w	r4, r2, sl
 8003f9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	00eb      	lsls	r3, r5, #3
 8003faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fae:	00e2      	lsls	r2, r4, #3
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	4643      	mov	r3, r8
 8003fb6:	18e3      	adds	r3, r4, r3
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	464b      	mov	r3, r9
 8003fbc:	eb45 0303 	adc.w	r3, r5, r3
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	028b      	lsls	r3, r1, #10
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fd8:	4621      	mov	r1, r4
 8003fda:	028a      	lsls	r2, r1, #10
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	61fa      	str	r2, [r7, #28]
 8003fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fec:	f7fc f8f4 	bl	80001d8 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	3301      	adds	r3, #1
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800400a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004012:	e002      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_GetSysClockFreq+0x204>)
 8004016:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800401c:	4618      	mov	r0, r3
 800401e:	3750      	adds	r7, #80	; 0x50
 8004020:	46bd      	mov	sp, r7
 8004022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800
 800402c:	00f42400 	.word	0x00f42400
 8004030:	007a1200 	.word	0x007a1200

08004034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <HAL_RCC_GetHCLKFreq+0x14>)
 800403a:	681b      	ldr	r3, [r3, #0]
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	200000b4 	.word	0x200000b4

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004050:	f7ff fff0 	bl	8004034 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4903      	ldr	r1, [pc, #12]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	08008b14 	.word	0x08008b14

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004098:	2b00      	cmp	r3, #0
 800409a:	d035      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800409c:	4b62      	ldr	r3, [pc, #392]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040a2:	f7fc ffd9 	bl	8001058 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040aa:	f7fc ffd5 	bl	8001058 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0b0      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040bc:	4b5b      	ldr	r3, [pc, #364]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	019a      	lsls	r2, r3, #6
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	071b      	lsls	r3, r3, #28
 80040d4:	4955      	ldr	r1, [pc, #340]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040dc:	4b52      	ldr	r3, [pc, #328]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e2:	f7fc ffb9 	bl	8001058 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ea:	f7fc ffb5 	bl	8001058 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e090      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040fc:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8083 	beq.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	4b44      	ldr	r3, [pc, #272]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a43      	ldr	r2, [pc, #268]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3e      	ldr	r2, [pc, #248]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800413e:	f7fc ff8b 	bl	8001058 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004146:	f7fc ff87 	bl	8001058 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e062      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004164:	4b31      	ldr	r3, [pc, #196]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d02f      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	d028      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004182:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800418c:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004192:	4b28      	ldr	r3, [pc, #160]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004198:	4a24      	ldr	r2, [pc, #144]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d114      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fc ff55 	bl	8001058 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fc ff51 	bl	8001058 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e02a      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c8:	4b18      	ldr	r3, [pc, #96]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ee      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e0:	d10d      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f6:	490d      	ldr	r1, [pc, #52]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	608b      	str	r3, [r1, #8]
 80041fc:	e005      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004204:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004208:	6093      	str	r3, [r2, #8]
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004216:	4905      	ldr	r1, [pc, #20]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	42470068 	.word	0x42470068
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000
 8004234:	42470e40 	.word	0x42470e40

08004238 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d13e      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d12f      	bne.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800426c:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800426e:	617b      	str	r3, [r7, #20]
          break;
 8004270:	e02f      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427e:	d108      	bne.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004280:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004288:	4a18      	ldr	r2, [pc, #96]	; (80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	e007      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a8:	099b      	lsrs	r3, r3, #6
 80042aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042bc:	0f1b      	lsrs	r3, r3, #28
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]
          break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
          break;
 80042d0:	bf00      	nop
        }
      }
      break;
 80042d2:	bf00      	nop
    }
  }
  return frequency;
 80042d4:	697b      	ldr	r3, [r7, #20]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00bb8000 	.word	0x00bb8000
 80042ec:	007a1200 	.word	0x007a1200
 80042f0:	00f42400 	.word	0x00f42400

080042f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e07b      	b.n	80043fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004316:	d009      	beq.n	800432c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
 800431e:	e005      	b.n	800432c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fc fd38 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	ea42 0103 	orr.w	r1, r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	f003 0104 	and.w	r1, r3, #4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f003 0210 	and.w	r2, r3, #16
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e041      	b.n	800449c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d106      	bne.n	8004432 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc fd0d 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f000 f895 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d001      	beq.n	80044bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e046      	b.n	800454a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_TIM_Base_Start+0xb4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d022      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d6:	d01d      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_TIM_Base_Start+0xb8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <HAL_TIM_Base_Start+0xbc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_TIM_Base_Start+0xc0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	; (8004568 <HAL_TIM_Base_Start+0xc4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <HAL_TIM_Base_Start+0xc8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_Base_Start+0x70>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a18      	ldr	r2, [pc, #96]	; (8004570 <HAL_TIM_Base_Start+0xcc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40010400 	.word	0x40010400
 800456c:	40014000 	.word	0x40014000
 8004570:	40001800 	.word	0x40001800

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a40      	ldr	r2, [pc, #256]	; (8004688 <TIM_Base_SetConfig+0x114>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3d      	ldr	r2, [pc, #244]	; (800468c <TIM_Base_SetConfig+0x118>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <TIM_Base_SetConfig+0x11c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <TIM_Base_SetConfig+0x120>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3a      	ldr	r2, [pc, #232]	; (8004698 <TIM_Base_SetConfig+0x124>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <TIM_Base_SetConfig+0x114>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d027      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2c      	ldr	r2, [pc, #176]	; (800468c <TIM_Base_SetConfig+0x118>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d023      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <TIM_Base_SetConfig+0x11c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <TIM_Base_SetConfig+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d01b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a29      	ldr	r2, [pc, #164]	; (8004698 <TIM_Base_SetConfig+0x124>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d017      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a28      	ldr	r2, [pc, #160]	; (800469c <TIM_Base_SetConfig+0x128>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <TIM_Base_SetConfig+0x12c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <TIM_Base_SetConfig+0x130>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a25      	ldr	r2, [pc, #148]	; (80046a8 <TIM_Base_SetConfig+0x134>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a24      	ldr	r2, [pc, #144]	; (80046ac <TIM_Base_SetConfig+0x138>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <TIM_Base_SetConfig+0x13c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <TIM_Base_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <TIM_Base_SetConfig+0x124>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40010400 	.word	0x40010400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800
 80046a8:	40001800 	.word	0x40001800
 80046ac:	40001c00 	.word	0x40001c00
 80046b0:	40002000 	.word	0x40002000

080046b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e05a      	b.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a21      	ldr	r2, [pc, #132]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d01d      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1a      	ldr	r2, [pc, #104]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10c      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40001800 	.word	0x40001800

080047ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047ac:	b084      	sub	sp, #16
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	f107 001c 	add.w	r0, r7, #28
 80047ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d122      	bne.n	800480a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d105      	bne.n	80047fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fbee 	bl	8005fe0 <USB_CoreReset>
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e01a      	b.n	8004840 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 fbe2 	bl	8005fe0 <USB_CoreReset>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	639a      	str	r2, [r3, #56]	; 0x38
 8004832:	e005      	b.n	8004840 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10b      	bne.n	800485e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f043 0206 	orr.w	r2, r3, #6
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800485e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800486a:	b004      	add	sp, #16
 800486c:	4770      	bx	lr
	...

08004870 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	4613      	mov	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d165      	bne.n	8004950 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a41      	ldr	r2, [pc, #260]	; (800498c <USB_SetTurnaroundTime+0x11c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d906      	bls.n	800489a <USB_SetTurnaroundTime+0x2a>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4a40      	ldr	r2, [pc, #256]	; (8004990 <USB_SetTurnaroundTime+0x120>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d202      	bcs.n	800489a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004894:	230f      	movs	r3, #15
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e062      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a3c      	ldr	r2, [pc, #240]	; (8004990 <USB_SetTurnaroundTime+0x120>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d306      	bcc.n	80048b0 <USB_SetTurnaroundTime+0x40>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <USB_SetTurnaroundTime+0x124>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d202      	bcs.n	80048b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048aa:	230e      	movs	r3, #14
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e057      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a38      	ldr	r2, [pc, #224]	; (8004994 <USB_SetTurnaroundTime+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d306      	bcc.n	80048c6 <USB_SetTurnaroundTime+0x56>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4a37      	ldr	r2, [pc, #220]	; (8004998 <USB_SetTurnaroundTime+0x128>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d202      	bcs.n	80048c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048c0:	230d      	movs	r3, #13
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e04c      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a33      	ldr	r2, [pc, #204]	; (8004998 <USB_SetTurnaroundTime+0x128>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d306      	bcc.n	80048dc <USB_SetTurnaroundTime+0x6c>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a32      	ldr	r2, [pc, #200]	; (800499c <USB_SetTurnaroundTime+0x12c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d802      	bhi.n	80048dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048d6:	230c      	movs	r3, #12
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e041      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <USB_SetTurnaroundTime+0x12c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d906      	bls.n	80048f2 <USB_SetTurnaroundTime+0x82>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4a2e      	ldr	r2, [pc, #184]	; (80049a0 <USB_SetTurnaroundTime+0x130>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d802      	bhi.n	80048f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048ec:	230b      	movs	r3, #11
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e036      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <USB_SetTurnaroundTime+0x130>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d906      	bls.n	8004908 <USB_SetTurnaroundTime+0x98>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <USB_SetTurnaroundTime+0x134>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004902:	230a      	movs	r3, #10
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e02b      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <USB_SetTurnaroundTime+0x134>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d906      	bls.n	800491e <USB_SetTurnaroundTime+0xae>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <USB_SetTurnaroundTime+0x138>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d202      	bcs.n	800491e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004918:	2309      	movs	r3, #9
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	e020      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <USB_SetTurnaroundTime+0x138>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d306      	bcc.n	8004934 <USB_SetTurnaroundTime+0xc4>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <USB_SetTurnaroundTime+0x13c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d802      	bhi.n	8004934 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800492e:	2308      	movs	r3, #8
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	e015      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <USB_SetTurnaroundTime+0x13c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d906      	bls.n	800494a <USB_SetTurnaroundTime+0xda>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <USB_SetTurnaroundTime+0x140>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d202      	bcs.n	800494a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004944:	2307      	movs	r3, #7
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e00a      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800494a:	2306      	movs	r3, #6
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e007      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004956:	2309      	movs	r3, #9
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e001      	b.n	8004960 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800495c:	2309      	movs	r3, #9
 800495e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	029b      	lsls	r3, r3, #10
 8004974:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	371c      	adds	r7, #28
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	00d8acbf 	.word	0x00d8acbf
 8004990:	00e4e1c0 	.word	0x00e4e1c0
 8004994:	00f42400 	.word	0x00f42400
 8004998:	01067380 	.word	0x01067380
 800499c:	011a499f 	.word	0x011a499f
 80049a0:	01312cff 	.word	0x01312cff
 80049a4:	014ca43f 	.word	0x014ca43f
 80049a8:	016e3600 	.word	0x016e3600
 80049ac:	01a6ab1f 	.word	0x01a6ab1f
 80049b0:	01e84800 	.word	0x01e84800

080049b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d115      	bne.n	8004a46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a26:	2001      	movs	r0, #1
 8004a28:	f7fc fb22 	bl	8001070 <HAL_Delay>
      ms++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f001 fa45 	bl	8005ec2 <USB_GetMode>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d01e      	beq.n	8004a7c <USB_SetCurrentMode+0x84>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b31      	cmp	r3, #49	; 0x31
 8004a42:	d9f0      	bls.n	8004a26 <USB_SetCurrentMode+0x2e>
 8004a44:	e01a      	b.n	8004a7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d115      	bne.n	8004a78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f7fc fb09 	bl	8001070 <HAL_Delay>
      ms++;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 fa2c 	bl	8005ec2 <USB_GetMode>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <USB_SetCurrentMode+0x84>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b31      	cmp	r3, #49	; 0x31
 8004a74:	d9f0      	bls.n	8004a58 <USB_SetCurrentMode+0x60>
 8004a76:	e001      	b.n	8004a7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e005      	b.n	8004a88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b32      	cmp	r3, #50	; 0x32
 8004a80:	d101      	bne.n	8004a86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a90:	b084      	sub	sp, #16
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e009      	b.n	8004ac4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	3340      	adds	r3, #64	; 0x40
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b0e      	cmp	r3, #14
 8004ac8:	d9f2      	bls.n	8004ab0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11c      	bne.n	8004b0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ade:	f043 0302 	orr.w	r3, r3, #2
 8004ae2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
 8004b08:	e00b      	b.n	8004b22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	4619      	mov	r1, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	680b      	ldr	r3, [r1, #0]
 8004b40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10c      	bne.n	8004b62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b4e:	2100      	movs	r1, #0
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f965 	bl	8004e20 <USB_SetDevSpeed>
 8004b56:	e008      	b.n	8004b6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b58:	2101      	movs	r1, #1
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f960 	bl	8004e20 <USB_SetDevSpeed>
 8004b60:	e003      	b.n	8004b6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b62:	2103      	movs	r1, #3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f95b 	bl	8004e20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f8f3 	bl	8004d58 <USB_FlushTxFifo>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f91f 	bl	8004dc0 <USB_FlushRxFifo>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	461a      	mov	r2, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e043      	b.n	8004c3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bcc:	d118      	bne.n	8004c00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be0:	461a      	mov	r2, r3
 8004be2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e013      	b.n	8004c12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e008      	b.n	8004c12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2300      	movs	r3, #0
 8004c22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	461a      	mov	r2, r3
 8004c32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d3b7      	bcc.n	8004bb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e043      	b.n	8004cd4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c62:	d118      	bne.n	8004c96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10a      	bne.n	8004c80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e013      	b.n	8004ca8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	e008      	b.n	8004ca8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ccc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d3b7      	bcc.n	8004c4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004cfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f043 0210 	orr.w	r2, r3, #16
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <USB_DevInit+0x2c4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f043 0208 	orr.w	r2, r3, #8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d3c:	f043 0304 	orr.w	r3, r3, #4
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d50:	b004      	add	sp, #16
 8004d52:	4770      	bx	lr
 8004d54:	803c3800 	.word	0x803c3800

08004d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <USB_FlushTxFifo+0x64>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e01b      	b.n	8004db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	daf2      	bge.n	8004d66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	019b      	lsls	r3, r3, #6
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3301      	adds	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <USB_FlushTxFifo+0x64>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d901      	bls.n	8004da2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e006      	b.n	8004db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d0f0      	beq.n	8004d90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	00030d40 	.word	0x00030d40

08004dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <USB_FlushRxFifo+0x5c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e018      	b.n	8004e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	daf2      	bge.n	8004dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2210      	movs	r2, #16
 8004dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <USB_FlushRxFifo+0x5c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e006      	b.n	8004e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d0f0      	beq.n	8004df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	00030d40 	.word	0x00030d40

08004e20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b087      	sub	sp, #28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]
 8004e76:	e00a      	b.n	8004e8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d002      	beq.n	8004e84 <USB_GetDevSpeed+0x32>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d102      	bne.n	8004e8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e84:	2302      	movs	r3, #2
 8004e86:	75fb      	strb	r3, [r7, #23]
 8004e88:	e001      	b.n	8004e8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e8a:	230f      	movs	r3, #15
 8004e8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d13a      	bne.n	8004f2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	2101      	movs	r1, #1
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d155      	bne.n	8004f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	791b      	ldrb	r3, [r3, #4]
 8004f0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	059b      	lsls	r3, r3, #22
 8004f12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f14:	4313      	orrs	r3, r2
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e036      	b.n	8004f9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	2101      	movs	r1, #1
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	68f9      	ldr	r1, [r7, #12]
 8004f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11a      	bne.n	8004f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	791b      	ldrb	r3, [r3, #4]
 8004f80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f82:	430b      	orrs	r3, r1
 8004f84:	4313      	orrs	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d161      	bne.n	800508c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fde:	d11f      	bne.n	8005020 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ffe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800501e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005040:	4013      	ands	r3, r2
 8005042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	68f9      	ldr	r1, [r7, #12]
 8005060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005064:	4013      	ands	r3, r2
 8005066:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	0159      	lsls	r1, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	440b      	add	r3, r1
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	4619      	mov	r1, r3
 8005084:	4b35      	ldr	r3, [pc, #212]	; (800515c <USB_DeactivateEndpoint+0x1b0>)
 8005086:	4013      	ands	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
 800508a:	e060      	b.n	800514e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800509e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a2:	d11f      	bne.n	80050e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	43db      	mvns	r3, r3
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005104:	4013      	ands	r3, r2
 8005106:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	43db      	mvns	r3, r3
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005128:	4013      	ands	r3, r2
 800512a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	0159      	lsls	r1, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	440b      	add	r3, r1
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	4619      	mov	r1, r3
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <USB_DeactivateEndpoint+0x1b4>)
 800514a:	4013      	ands	r3, r2
 800514c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	ec337800 	.word	0xec337800
 8005160:	eff37800 	.word	0xeff37800

08005164 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	785b      	ldrb	r3, [r3, #1]
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 815c 	bne.w	800543e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d132      	bne.n	80051f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	0cdb      	lsrs	r3, r3, #19
 80051ee:	04db      	lsls	r3, r3, #19
 80051f0:	6113      	str	r3, [r2, #16]
 80051f2:	e074      	b.n	80052de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520e:	0cdb      	lsrs	r3, r3, #19
 8005210:	04db      	lsls	r3, r3, #19
 8005212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	440b      	add	r3, r1
 8005250:	1e59      	subs	r1, r3, #1
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	fbb1 f3f3 	udiv	r3, r1, r3
 800525a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800525c:	4b9d      	ldr	r3, [pc, #628]	; (80054d4 <USB_EPStartXfer+0x370>)
 800525e:	400b      	ands	r3, r1
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	0148      	lsls	r0, r1, #5
 800528a:	69f9      	ldr	r1, [r7, #28]
 800528c:	4401      	add	r1, r0
 800528e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005292:	4313      	orrs	r3, r2
 8005294:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	791b      	ldrb	r3, [r3, #4]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d11f      	bne.n	80052de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80052bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d14b      	bne.n	800537c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	461a      	mov	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	791b      	ldrb	r3, [r3, #4]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d128      	bne.n	800535a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d110      	bne.n	800533a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e00f      	b.n	800535a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005374:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e133      	b.n	80055e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800539a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	791b      	ldrb	r3, [r3, #4]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d015      	beq.n	80053d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 811b 	beq.w	80055e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	2101      	movs	r1, #1
 80053c0:	fa01 f303 	lsl.w	r3, r1, r3
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ca:	4313      	orrs	r3, r2
 80053cc:	634b      	str	r3, [r1, #52]	; 0x34
 80053ce:	e109      	b.n	80055e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d110      	bne.n	8005402 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e00f      	b.n	8005422 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005420:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6919      	ldr	r1, [r3, #16]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781a      	ldrb	r2, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	b298      	uxth	r0, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	4603      	mov	r3, r0
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fade 	bl	80059f8 <USB_WritePacket>
 800543c:	e0d2      	b.n	80055e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005458:	0cdb      	lsrs	r3, r3, #19
 800545a:	04db      	lsls	r3, r3, #19
 800545c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005478:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800547c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005480:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d126      	bne.n	80054d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a0:	69b9      	ldr	r1, [r7, #24]
 80054a2:	0148      	lsls	r0, r1, #5
 80054a4:	69f9      	ldr	r1, [r7, #28]
 80054a6:	4401      	add	r1, r0
 80054a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ac:	4313      	orrs	r3, r2
 80054ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ce:	6113      	str	r3, [r2, #16]
 80054d0:	e03a      	b.n	8005548 <USB_EPStartXfer+0x3e4>
 80054d2:	bf00      	nop
 80054d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	699a      	ldr	r2, [r3, #24]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	1e5a      	subs	r2, r3, #1
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	8afa      	ldrh	r2, [r7, #22]
 80054f4:	fb03 f202 	mul.w	r2, r3, r2
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	8afb      	ldrh	r3, [r7, #22]
 800550c:	04d9      	lsls	r1, r3, #19
 800550e:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <USB_EPStartXfer+0x48c>)
 8005510:	400b      	ands	r3, r1
 8005512:	69b9      	ldr	r1, [r7, #24]
 8005514:	0148      	lsls	r0, r1, #5
 8005516:	69f9      	ldr	r1, [r7, #28]
 8005518:	4401      	add	r1, r0
 800551a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800551e:	4313      	orrs	r3, r2
 8005520:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	0148      	lsls	r0, r1, #5
 800553c:	69f9      	ldr	r1, [r7, #28]
 800553e:	4401      	add	r1, r0
 8005540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005544:	4313      	orrs	r3, r2
 8005546:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d10d      	bne.n	800556a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6919      	ldr	r1, [r3, #16]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	460a      	mov	r2, r1
 8005568:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d128      	bne.n	80055c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d110      	bne.n	80055a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e00f      	b.n	80055c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	1ff80000 	.word	0x1ff80000

080055f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 80ce 	bne.w	80057b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d132      	bne.n	8005684 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800563c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567c:	0cdb      	lsrs	r3, r3, #19
 800567e:	04db      	lsls	r3, r3, #19
 8005680:	6113      	str	r3, [r2, #16]
 8005682:	e04e      	b.n	8005722 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569e:	0cdb      	lsrs	r3, r3, #19
 80056a0:	04db      	lsls	r3, r3, #19
 80056a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d903      	bls.n	80056dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	0148      	lsls	r0, r1, #5
 8005716:	6979      	ldr	r1, [r7, #20]
 8005718:	4401      	add	r1, r0
 800571a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800571e:	4313      	orrs	r3, r2
 8005720:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d11e      	bne.n	8005766 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573c:	461a      	mov	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e097      	b.n	8005896 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005784:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8083 	beq.w	8005896 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	2101      	movs	r1, #1
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	6979      	ldr	r1, [r7, #20]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ac:	4313      	orrs	r3, r2
 80057ae:	634b      	str	r3, [r1, #52]	; 0x34
 80057b0:	e071      	b.n	8005896 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057cc:	0cdb      	lsrs	r3, r3, #19
 80057ce:	04db      	lsls	r3, r3, #19
 80057d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800582c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005844:	6939      	ldr	r1, [r7, #16]
 8005846:	0148      	lsls	r0, r1, #5
 8005848:	6979      	ldr	r1, [r7, #20]
 800584a:	4401      	add	r1, r0
 800584c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d10d      	bne.n	8005876 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6919      	ldr	r1, [r3, #16]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	460a      	mov	r2, r1
 8005874:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005894:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d14a      	bne.n	8005958 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	f040 8086 	bne.w	80059ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005900:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	7812      	ldrb	r2, [r2, #0]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005924:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3301      	adds	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005932:	4293      	cmp	r3, r2
 8005934:	d902      	bls.n	800593c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
          break;
 800593a:	e056      	b.n	80059ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005954:	d0e7      	beq.n	8005926 <USB_EPStopXfer+0x82>
 8005956:	e048      	b.n	80059ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800596c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005970:	d13b      	bne.n	80059ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005994:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3301      	adds	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d902      	bls.n	80059d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	75fb      	strb	r3, [r7, #23]
          break;
 80059ce:	e00c      	b.n	80059ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e8:	d0e7      	beq.n	80059ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	; 0x24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4611      	mov	r1, r2
 8005a04:	461a      	mov	r2, r3
 8005a06:	460b      	mov	r3, r1
 8005a08:	71fb      	strb	r3, [r7, #7]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d123      	bne.n	8005a66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a1e:	88bb      	ldrh	r3, [r7, #4]
 8005a20:	3303      	adds	r3, #3
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	e018      	b.n	8005a5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	031a      	lsls	r2, r3, #12
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a38:	461a      	mov	r2, r3
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	3301      	adds	r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d3e2      	bcc.n	8005a2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3724      	adds	r7, #36	; 0x24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b08b      	sub	sp, #44	; 0x2c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	089b      	lsrs	r3, r3, #2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	e014      	b.n	8005aca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	3301      	adds	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	3301      	adds	r3, #1
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d3e6      	bcc.n	8005aa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ad2:	8bfb      	ldrh	r3, [r7, #30]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01e      	beq.n	8005b16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	701a      	strb	r2, [r3, #0]
      i++;
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	3301      	adds	r3, #1
 8005b02:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	3301      	adds	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b0a:	8bfb      	ldrh	r3, [r7, #30]
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b10:	8bfb      	ldrh	r3, [r7, #30]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1ea      	bne.n	8005aec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	372c      	adds	r7, #44	; 0x2c
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d12c      	bne.n	8005b9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	db12      	blt.n	8005b78 <USB_EPSetStall+0x54>
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00f      	beq.n	8005b78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	e02b      	b.n	8005bf2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	db12      	blt.n	8005bd2 <USB_EPSetStall+0xae>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00f      	beq.n	8005bd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bf0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d128      	bne.n	8005c6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	791b      	ldrb	r3, [r3, #4]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d003      	beq.n	8005c4c <USB_EPClearStall+0x4c>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	791b      	ldrb	r3, [r3, #4]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d138      	bne.n	8005cbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e027      	b.n	8005cbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	791b      	ldrb	r3, [r3, #4]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d003      	beq.n	8005c9e <USB_EPClearStall+0x9e>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	791b      	ldrb	r3, [r3, #4]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d10f      	bne.n	8005cbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d06:	4313      	orrs	r3, r2
 8005d08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d46:	f023 0302 	bic.w	r3, r3, #2
 8005d4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005db4:	68fb      	ldr	r3, [r7, #12]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	4013      	ands	r3, r2
 8005de4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	0c1b      	lsrs	r3, r3, #16
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	b29b      	uxth	r3, r3
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	4013      	ands	r3, r2
 8005e56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e58:	68bb      	ldr	r3, [r7, #8]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	fa22 f303 	lsr.w	r3, r2, r3
 8005e96:	01db      	lsls	r3, r3, #7
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0301 	and.w	r3, r3, #1
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005efc:	f023 0307 	bic.w	r3, r3, #7
 8005f00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	333c      	adds	r3, #60	; 0x3c
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <USB_EP0_OutStart+0xb8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d90a      	bls.n	8005f5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f58:	d101      	bne.n	8005f5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e037      	b.n	8005fce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f64:	461a      	mov	r2, r3
 8005f66:	2300      	movs	r3, #0
 8005f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8c:	f043 0318 	orr.w	r3, r3, #24
 8005f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fa4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d10f      	bne.n	8005fcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005fca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	4f54300a 	.word	0x4f54300a

08005fe0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a13      	ldr	r2, [pc, #76]	; (8006044 <USB_CoreReset+0x64>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e01b      	b.n	8006036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	daf2      	bge.n	8005fec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f043 0201 	orr.w	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3301      	adds	r3, #1
 800601a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <USB_CoreReset+0x64>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e006      	b.n	8006036 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b01      	cmp	r3, #1
 8006032:	d0f0      	beq.n	8006016 <USB_CoreReset+0x36>

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	00030d40 	.word	0x00030d40

08006048 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006054:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006058:	f002 fca2 	bl	80089a0 <USBD_static_malloc>
 800605c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32b0      	adds	r2, #176	; 0xb0
 800606e:	2100      	movs	r1, #0
 8006070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006074:	2302      	movs	r3, #2
 8006076:	e0d4      	b.n	8006222 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006078:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800607c:	2100      	movs	r1, #0
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f002 fcf6 	bl	8008a70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32b0      	adds	r2, #176	; 0xb0
 800608e:	68f9      	ldr	r1, [r7, #12]
 8006090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	32b0      	adds	r2, #176	; 0xb0
 800609e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7c1b      	ldrb	r3, [r3, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d138      	bne.n	8006122 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060b0:	4b5e      	ldr	r3, [pc, #376]	; (800622c <USBD_CDC_Init+0x1e4>)
 80060b2:	7819      	ldrb	r1, [r3, #0]
 80060b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b8:	2202      	movs	r2, #2
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f002 fb4d 	bl	800875a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060c0:	4b5a      	ldr	r3, [pc, #360]	; (800622c <USBD_CDC_Init+0x1e4>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 020f 	and.w	r2, r3, #15
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	3324      	adds	r3, #36	; 0x24
 80060d6:	2201      	movs	r2, #1
 80060d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060da:	4b55      	ldr	r3, [pc, #340]	; (8006230 <USBD_CDC_Init+0x1e8>)
 80060dc:	7819      	ldrb	r1, [r3, #0]
 80060de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e2:	2202      	movs	r2, #2
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 fb38 	bl	800875a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060ea:	4b51      	ldr	r3, [pc, #324]	; (8006230 <USBD_CDC_Init+0x1e8>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	f003 020f 	and.w	r2, r3, #15
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006102:	2201      	movs	r2, #1
 8006104:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006106:	4b4b      	ldr	r3, [pc, #300]	; (8006234 <USBD_CDC_Init+0x1ec>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	3326      	adds	r3, #38	; 0x26
 800611c:	2210      	movs	r2, #16
 800611e:	801a      	strh	r2, [r3, #0]
 8006120:	e035      	b.n	800618e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006122:	4b42      	ldr	r3, [pc, #264]	; (800622c <USBD_CDC_Init+0x1e4>)
 8006124:	7819      	ldrb	r1, [r3, #0]
 8006126:	2340      	movs	r3, #64	; 0x40
 8006128:	2202      	movs	r2, #2
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f002 fb15 	bl	800875a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006130:	4b3e      	ldr	r3, [pc, #248]	; (800622c <USBD_CDC_Init+0x1e4>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	f003 020f 	and.w	r2, r3, #15
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	3324      	adds	r3, #36	; 0x24
 8006146:	2201      	movs	r2, #1
 8006148:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800614a:	4b39      	ldr	r3, [pc, #228]	; (8006230 <USBD_CDC_Init+0x1e8>)
 800614c:	7819      	ldrb	r1, [r3, #0]
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	2202      	movs	r2, #2
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f002 fb01 	bl	800875a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <USBD_CDC_Init+0x1e8>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006170:	2201      	movs	r2, #1
 8006172:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006174:	4b2f      	ldr	r3, [pc, #188]	; (8006234 <USBD_CDC_Init+0x1ec>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	3326      	adds	r3, #38	; 0x26
 800618a:	2210      	movs	r2, #16
 800618c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800618e:	4b29      	ldr	r3, [pc, #164]	; (8006234 <USBD_CDC_Init+0x1ec>)
 8006190:	7819      	ldrb	r1, [r3, #0]
 8006192:	2308      	movs	r3, #8
 8006194:	2203      	movs	r2, #3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f002 fadf 	bl	800875a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <USBD_CDC_Init+0x1ec>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3324      	adds	r3, #36	; 0x24
 80061b2:	2201      	movs	r2, #1
 80061b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	33b0      	adds	r3, #176	; 0xb0
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061ec:	2302      	movs	r3, #2
 80061ee:	e018      	b.n	8006222 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7c1b      	ldrb	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <USBD_CDC_Init+0x1e8>)
 80061fa:	7819      	ldrb	r1, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f002 fb96 	bl	8008938 <USBD_LL_PrepareReceive>
 800620c:	e008      	b.n	8006220 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <USBD_CDC_Init+0x1e8>)
 8006210:	7819      	ldrb	r1, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006218:	2340      	movs	r3, #64	; 0x40
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f002 fb8c 	bl	8008938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000147 	.word	0x20000147
 8006230:	20000148 	.word	0x20000148
 8006234:	20000149 	.word	0x20000149

08006238 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006244:	4b3a      	ldr	r3, [pc, #232]	; (8006330 <USBD_CDC_DeInit+0xf8>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f002 faab 	bl	80087a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006250:	4b37      	ldr	r3, [pc, #220]	; (8006330 <USBD_CDC_DeInit+0xf8>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 020f 	and.w	r2, r3, #15
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	3324      	adds	r3, #36	; 0x24
 8006266:	2200      	movs	r2, #0
 8006268:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800626a:	4b32      	ldr	r3, [pc, #200]	; (8006334 <USBD_CDC_DeInit+0xfc>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f002 fa98 	bl	80087a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <USBD_CDC_DeInit+0xfc>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	f003 020f 	and.w	r2, r3, #15
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800628e:	2200      	movs	r2, #0
 8006290:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006292:	4b29      	ldr	r3, [pc, #164]	; (8006338 <USBD_CDC_DeInit+0x100>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 fa84 	bl	80087a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800629e:	4b26      	ldr	r3, [pc, #152]	; (8006338 <USBD_CDC_DeInit+0x100>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3324      	adds	r3, #36	; 0x24
 80062b4:	2200      	movs	r2, #0
 80062b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80062b8:	4b1f      	ldr	r3, [pc, #124]	; (8006338 <USBD_CDC_DeInit+0x100>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	3326      	adds	r3, #38	; 0x26
 80062ce:	2200      	movs	r2, #0
 80062d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	32b0      	adds	r2, #176	; 0xb0
 80062dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01f      	beq.n	8006324 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	33b0      	adds	r3, #176	; 0xb0
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	32b0      	adds	r2, #176	; 0xb0
 8006302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006306:	4618      	mov	r0, r3
 8006308:	f002 fb58 	bl	80089bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	32b0      	adds	r2, #176	; 0xb0
 8006316:	2100      	movs	r1, #0
 8006318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000147 	.word	0x20000147
 8006334:	20000148 	.word	0x20000148
 8006338:	20000149 	.word	0x20000149

0800633c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	32b0      	adds	r2, #176	; 0xb0
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	e0bf      	b.n	80064ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006374:	2b00      	cmp	r3, #0
 8006376:	d050      	beq.n	800641a <USBD_CDC_Setup+0xde>
 8006378:	2b20      	cmp	r3, #32
 800637a:	f040 80af 	bne.w	80064dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	88db      	ldrh	r3, [r3, #6]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d03a      	beq.n	80063fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	b25b      	sxtb	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	da1b      	bge.n	80063c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	33b0      	adds	r3, #176	; 0xb0
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80063a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	88d2      	ldrh	r2, [r2, #6]
 80063ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	88db      	ldrh	r3, [r3, #6]
 80063b2:	2b07      	cmp	r3, #7
 80063b4:	bf28      	it	cs
 80063b6:	2307      	movcs	r3, #7
 80063b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	89fa      	ldrh	r2, [r7, #14]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fd89 	bl	8007ed8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80063c6:	e090      	b.n	80064ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	785a      	ldrb	r2, [r3, #1]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	88db      	ldrh	r3, [r3, #6]
 80063d6:	2b3f      	cmp	r3, #63	; 0x3f
 80063d8:	d803      	bhi.n	80063e2 <USBD_CDC_Setup+0xa6>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	88db      	ldrh	r3, [r3, #6]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	e000      	b.n	80063e4 <USBD_CDC_Setup+0xa8>
 80063e2:	2240      	movs	r2, #64	; 0x40
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80063ea:	6939      	ldr	r1, [r7, #16]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80063f2:	461a      	mov	r2, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fd9b 	bl	8007f30 <USBD_CtlPrepareRx>
      break;
 80063fa:	e076      	b.n	80064ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	33b0      	adds	r3, #176	; 0xb0
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	7850      	ldrb	r0, [r2, #1]
 8006412:	2200      	movs	r2, #0
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	4798      	blx	r3
      break;
 8006418:	e067      	b.n	80064ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	2b0b      	cmp	r3, #11
 8006420:	d851      	bhi.n	80064c6 <USBD_CDC_Setup+0x18a>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <USBD_CDC_Setup+0xec>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006459 	.word	0x08006459
 800642c:	080064d5 	.word	0x080064d5
 8006430:	080064c7 	.word	0x080064c7
 8006434:	080064c7 	.word	0x080064c7
 8006438:	080064c7 	.word	0x080064c7
 800643c:	080064c7 	.word	0x080064c7
 8006440:	080064c7 	.word	0x080064c7
 8006444:	080064c7 	.word	0x080064c7
 8006448:	080064c7 	.word	0x080064c7
 800644c:	080064c7 	.word	0x080064c7
 8006450:	08006483 	.word	0x08006483
 8006454:	080064ad 	.word	0x080064ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b03      	cmp	r3, #3
 8006462:	d107      	bne.n	8006474 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006464:	f107 030a 	add.w	r3, r7, #10
 8006468:	2202      	movs	r2, #2
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fd33 	bl	8007ed8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006472:	e032      	b.n	80064da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fcbd 	bl	8007df6 <USBD_CtlError>
            ret = USBD_FAIL;
 800647c:	2303      	movs	r3, #3
 800647e:	75fb      	strb	r3, [r7, #23]
          break;
 8006480:	e02b      	b.n	80064da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b03      	cmp	r3, #3
 800648c:	d107      	bne.n	800649e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800648e:	f107 030d 	add.w	r3, r7, #13
 8006492:	2201      	movs	r2, #1
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 fd1e 	bl	8007ed8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800649c:	e01d      	b.n	80064da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 fca8 	bl	8007df6 <USBD_CtlError>
            ret = USBD_FAIL;
 80064a6:	2303      	movs	r3, #3
 80064a8:	75fb      	strb	r3, [r7, #23]
          break;
 80064aa:	e016      	b.n	80064da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d00f      	beq.n	80064d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80064b8:	6839      	ldr	r1, [r7, #0]
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fc9b 	bl	8007df6 <USBD_CtlError>
            ret = USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064c4:	e008      	b.n	80064d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fc94 	bl	8007df6 <USBD_CtlError>
          ret = USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	75fb      	strb	r3, [r7, #23]
          break;
 80064d2:	e002      	b.n	80064da <USBD_CDC_Setup+0x19e>
          break;
 80064d4:	bf00      	nop
 80064d6:	e008      	b.n	80064ea <USBD_CDC_Setup+0x1ae>
          break;
 80064d8:	bf00      	nop
      }
      break;
 80064da:	e006      	b.n	80064ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fc89 	bl	8007df6 <USBD_CtlError>
      ret = USBD_FAIL;
 80064e4:	2303      	movs	r3, #3
 80064e6:	75fb      	strb	r3, [r7, #23]
      break;
 80064e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006506:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32b0      	adds	r2, #176	; 0xb0
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	e065      	b.n	80065ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	32b0      	adds	r2, #176	; 0xb0
 8006528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	3318      	adds	r3, #24
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02f      	beq.n	80065a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	f003 020f 	and.w	r2, r3, #15
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	3318      	adds	r3, #24
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	f003 010f 	and.w	r1, r3, #15
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	460b      	mov	r3, r1
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	440b      	add	r3, r1
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4403      	add	r3, r0
 8006570:	3348      	adds	r3, #72	; 0x48
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	fbb2 f1f3 	udiv	r1, r2, r3
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800657e:	2b00      	cmp	r3, #0
 8006580:	d112      	bne.n	80065a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	f003 020f 	and.w	r2, r3, #15
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	3318      	adds	r3, #24
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800659a:	78f9      	ldrb	r1, [r7, #3]
 800659c:	2300      	movs	r3, #0
 800659e:	2200      	movs	r2, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f002 f9a8 	bl	80088f6 <USBD_LL_Transmit>
 80065a6:	e01f      	b.n	80065e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	33b0      	adds	r3, #176	; 0xb0
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d010      	beq.n	80065e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	33b0      	adds	r3, #176	; 0xb0
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80065e4:	78fa      	ldrb	r2, [r7, #3]
 80065e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	32b0      	adds	r2, #176	; 0xb0
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	32b0      	adds	r2, #176	; 0xb0
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006620:	2303      	movs	r3, #3
 8006622:	e01a      	b.n	800665a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f002 f9a6 	bl	800897a <USBD_LL_GetRxDataSize>
 800662e:	4602      	mov	r2, r0
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	33b0      	adds	r3, #176	; 0xb0
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006654:	4611      	mov	r1, r2
 8006656:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	32b0      	adds	r2, #176	; 0xb0
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	e025      	b.n	80066d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	33b0      	adds	r3, #176	; 0xb0
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01a      	beq.n	80066ce <USBD_CDC_EP0_RxReady+0x6c>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800669e:	2bff      	cmp	r3, #255	; 0xff
 80066a0:	d015      	beq.n	80066ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	33b0      	adds	r3, #176	; 0xb0
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80066ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80066c2:	b292      	uxth	r2, r2
 80066c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	22ff      	movs	r2, #255	; 0xff
 80066ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066e0:	2182      	movs	r1, #130	; 0x82
 80066e2:	4818      	ldr	r0, [pc, #96]	; (8006744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066e4:	f000 fd4f 	bl	8007186 <USBD_GetEpDesc>
 80066e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066ea:	2101      	movs	r1, #1
 80066ec:	4815      	ldr	r0, [pc, #84]	; (8006744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066ee:	f000 fd4a 	bl	8007186 <USBD_GetEpDesc>
 80066f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066f4:	2181      	movs	r1, #129	; 0x81
 80066f6:	4813      	ldr	r0, [pc, #76]	; (8006744 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066f8:	f000 fd45 	bl	8007186 <USBD_GetEpDesc>
 80066fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2210      	movs	r2, #16
 8006708:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d006      	beq.n	800671e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2200      	movs	r2, #0
 8006714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006718:	711a      	strb	r2, [r3, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d006      	beq.n	8006732 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800672c:	711a      	strb	r2, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2243      	movs	r2, #67	; 0x43
 8006736:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800673a:	4618      	mov	r0, r3
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000104 	.word	0x20000104

08006748 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006750:	2182      	movs	r1, #130	; 0x82
 8006752:	4818      	ldr	r0, [pc, #96]	; (80067b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006754:	f000 fd17 	bl	8007186 <USBD_GetEpDesc>
 8006758:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800675a:	2101      	movs	r1, #1
 800675c:	4815      	ldr	r0, [pc, #84]	; (80067b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800675e:	f000 fd12 	bl	8007186 <USBD_GetEpDesc>
 8006762:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006764:	2181      	movs	r1, #129	; 0x81
 8006766:	4813      	ldr	r0, [pc, #76]	; (80067b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006768:	f000 fd0d 	bl	8007186 <USBD_GetEpDesc>
 800676c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2210      	movs	r2, #16
 8006778:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d006      	beq.n	800678e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2200      	movs	r2, #0
 8006784:	711a      	strb	r2, [r3, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f042 0202 	orr.w	r2, r2, #2
 800678c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d006      	beq.n	80067a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	711a      	strb	r2, [r3, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f042 0202 	orr.w	r2, r2, #2
 80067a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2243      	movs	r2, #67	; 0x43
 80067a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000104 	.word	0x20000104

080067b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067c0:	2182      	movs	r1, #130	; 0x82
 80067c2:	4818      	ldr	r0, [pc, #96]	; (8006824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067c4:	f000 fcdf 	bl	8007186 <USBD_GetEpDesc>
 80067c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067ca:	2101      	movs	r1, #1
 80067cc:	4815      	ldr	r0, [pc, #84]	; (8006824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067ce:	f000 fcda 	bl	8007186 <USBD_GetEpDesc>
 80067d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067d4:	2181      	movs	r1, #129	; 0x81
 80067d6:	4813      	ldr	r0, [pc, #76]	; (8006824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067d8:	f000 fcd5 	bl	8007186 <USBD_GetEpDesc>
 80067dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2210      	movs	r2, #16
 80067e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d006      	beq.n	80067fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f8:	711a      	strb	r2, [r3, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800680c:	711a      	strb	r2, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2243      	movs	r2, #67	; 0x43
 8006816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006818:	4b02      	ldr	r3, [pc, #8]	; (8006824 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800681a:	4618      	mov	r0, r3
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000104 	.word	0x20000104

08006828 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	220a      	movs	r2, #10
 8006834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	200000c0 	.word	0x200000c0

08006848 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006858:	2303      	movs	r3, #3
 800685a:	e009      	b.n	8006870 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	33b0      	adds	r3, #176	; 0xb0
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	32b0      	adds	r2, #176	; 0xb0
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800689e:	2303      	movs	r3, #3
 80068a0:	e008      	b.n	80068b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	32b0      	adds	r2, #176	; 0xb0
 80068d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e004      	b.n	80068ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	32b0      	adds	r2, #176	; 0xb0
 800690e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006912:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	32b0      	adds	r2, #176	; 0xb0
 8006922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800692a:	2303      	movs	r3, #3
 800692c:	e025      	b.n	800697a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11f      	bne.n	8006978 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2201      	movs	r2, #1
 800693c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006940:	4b10      	ldr	r3, [pc, #64]	; (8006984 <USBD_CDC_TransmitPacket+0x88>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4403      	add	r3, r0
 800695a:	3318      	adds	r3, #24
 800695c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <USBD_CDC_TransmitPacket+0x88>)
 8006960:	7819      	ldrb	r1, [r3, #0]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 ffc1 	bl	80088f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000147 	.word	0x20000147

08006988 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32b0      	adds	r2, #176	; 0xb0
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	32b0      	adds	r2, #176	; 0xb0
 80069aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e018      	b.n	80069e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7c1b      	ldrb	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <USBD_CDC_ReceivePacket+0x68>)
 80069c0:	7819      	ldrb	r1, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 ffb3 	bl	8008938 <USBD_LL_PrepareReceive>
 80069d2:	e008      	b.n	80069e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <USBD_CDC_ReceivePacket+0x68>)
 80069d6:	7819      	ldrb	r1, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069de:	2340      	movs	r3, #64	; 0x40
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 ffa9 	bl	8008938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000148 	.word	0x20000148

080069f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e01f      	b.n	8006a4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	79fa      	ldrb	r2, [r7, #7]
 8006a3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f001 fe23 	bl	800868c <USBD_LL_Init>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e025      	b.n	8006ab8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32ae      	adds	r2, #174	; 0xae
 8006a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00f      	beq.n	8006aa8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	32ae      	adds	r2, #174	; 0xae
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	f107 020e 	add.w	r2, r7, #14
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	4798      	blx	r3
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 fe2b 	bl	8008724 <USBD_LL_Start>
 8006ace:	4603      	mov	r3, r0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ae0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	4611      	mov	r1, r2
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	4611      	mov	r1, r2
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f908 	bl	8007d82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b80:	461a      	mov	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d01a      	beq.n	8006bcc <USBD_LL_SetupStage+0x72>
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d822      	bhi.n	8006be0 <USBD_LL_SetupStage+0x86>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <USBD_LL_SetupStage+0x4a>
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d00a      	beq.n	8006bb8 <USBD_LL_SetupStage+0x5e>
 8006ba2:	e01d      	b.n	8006be0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb5f 	bl	8007270 <USBD_StdDevReq>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb6:	e020      	b.n	8006bfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbc7 	bl	8007354 <USBD_StdItfReq>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bca:	e016      	b.n	8006bfa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fc29 	bl	800742c <USBD_StdEPReq>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006bde:	e00c      	b.n	8006bfa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006be6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fdf8 	bl	80087e4 <USBD_LL_StallEP>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf8:	bf00      	nop
  }

  return ret;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d16e      	bne.n	8006cfa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	f040 8098 	bne.w	8006d60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d913      	bls.n	8006c64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	4293      	cmp	r3, r2
 8006c54:	bf28      	it	cs
 8006c56:	4613      	movcs	r3, r2
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f001 f984 	bl	8007f6a <USBD_CtlContinueRx>
 8006c62:	e07d      	b.n	8006d60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d014      	beq.n	8006c9c <USBD_LL_DataOutStage+0x98>
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d81d      	bhi.n	8006cb2 <USBD_LL_DataOutStage+0xae>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <USBD_LL_DataOutStage+0x7c>
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d003      	beq.n	8006c86 <USBD_LL_DataOutStage+0x82>
 8006c7e:	e018      	b.n	8006cb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	75bb      	strb	r3, [r7, #22]
            break;
 8006c84:	e018      	b.n	8006cb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fa5e 	bl	8007152 <USBD_CoreFindIF>
 8006c96:	4603      	mov	r3, r0
 8006c98:	75bb      	strb	r3, [r7, #22]
            break;
 8006c9a:	e00d      	b.n	8006cb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 fa60 	bl	800716c <USBD_CoreFindEP>
 8006cac:	4603      	mov	r3, r0
 8006cae:	75bb      	strb	r3, [r7, #22]
            break;
 8006cb0:	e002      	b.n	8006cb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75bb      	strb	r3, [r7, #22]
            break;
 8006cb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006cb8:	7dbb      	ldrb	r3, [r7, #22]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d119      	bne.n	8006cf2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d113      	bne.n	8006cf2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006cca:	7dba      	ldrb	r2, [r7, #22]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	32ae      	adds	r2, #174	; 0xae
 8006cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006cda:	7dba      	ldrb	r2, [r7, #22]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ce2:	7dba      	ldrb	r2, [r7, #22]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	32ae      	adds	r2, #174	; 0xae
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f001 f94a 	bl	8007f8c <USBD_CtlSendStatus>
 8006cf8:	e032      	b.n	8006d60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cfa:	7afb      	ldrb	r3, [r7, #11]
 8006cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	4619      	mov	r1, r3
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fa31 	bl	800716c <USBD_CoreFindEP>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d0e:	7dbb      	ldrb	r3, [r7, #22]
 8006d10:	2bff      	cmp	r3, #255	; 0xff
 8006d12:	d025      	beq.n	8006d60 <USBD_LL_DataOutStage+0x15c>
 8006d14:	7dbb      	ldrb	r3, [r7, #22]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d122      	bne.n	8006d60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d117      	bne.n	8006d56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006d26:	7dba      	ldrb	r2, [r7, #22]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	32ae      	adds	r2, #174	; 0xae
 8006d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00f      	beq.n	8006d56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d36:	7dba      	ldrb	r2, [r7, #22]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d3e:	7dba      	ldrb	r2, [r7, #22]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	32ae      	adds	r2, #174	; 0xae
 8006d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	7afa      	ldrb	r2, [r7, #11]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	4798      	blx	r3
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	e000      	b.n	8006d62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	460b      	mov	r3, r1
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d16f      	bne.n	8006e5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3314      	adds	r3, #20
 8006d82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d15a      	bne.n	8006e44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d914      	bls.n	8006dc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f001 f8ac 	bl	8007f0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006db6:	2300      	movs	r3, #0
 8006db8:	2200      	movs	r2, #0
 8006dba:	2100      	movs	r1, #0
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f001 fdbb 	bl	8008938 <USBD_LL_PrepareReceive>
 8006dc2:	e03f      	b.n	8006e44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d11c      	bne.n	8006e0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d316      	bcc.n	8006e0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d20f      	bcs.n	8006e0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f001 f88d 	bl	8007f0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2100      	movs	r1, #0
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f001 fd98 	bl	8008938 <USBD_LL_PrepareReceive>
 8006e08:	e01c      	b.n	8006e44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d10f      	bne.n	8006e36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f001 fcd3 	bl	80087e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f001 f8b7 	bl	8007fb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d03a      	beq.n	8006ec4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fe42 	bl	8006ad8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e5c:	e032      	b.n	8006ec4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f97f 	bl	800716c <USBD_CoreFindEP>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	2bff      	cmp	r3, #255	; 0xff
 8006e76:	d025      	beq.n	8006ec4 <USBD_LL_DataInStage+0x15a>
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d122      	bne.n	8006ec4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d11c      	bne.n	8006ec4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e8a:	7dfa      	ldrb	r2, [r7, #23]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	32ae      	adds	r2, #174	; 0xae
 8006e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d014      	beq.n	8006ec4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e9a:	7dfa      	ldrb	r2, [r7, #23]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006ea2:	7dfa      	ldrb	r2, [r7, #23]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	32ae      	adds	r2, #174	; 0xae
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	7afa      	ldrb	r2, [r7, #11]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	4798      	blx	r3
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006eba:	7dbb      	ldrb	r3, [r7, #22]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006ec0:	7dbb      	ldrb	r3, [r7, #22]
 8006ec2:	e000      	b.n	8006ec6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d014      	beq.n	8006f34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00e      	beq.n	8006f34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6852      	ldr	r2, [r2, #4]
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	4611      	mov	r1, r2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	2200      	movs	r2, #0
 8006f38:	2100      	movs	r1, #0
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fc0d 	bl	800875a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2240      	movs	r2, #64	; 0x40
 8006f4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f50:	2340      	movs	r3, #64	; 0x40
 8006f52:	2200      	movs	r2, #0
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fbff 	bl	800875a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2240      	movs	r2, #64	; 0x40
 8006f66:	621a      	str	r2, [r3, #32]

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	78fa      	ldrb	r2, [r7, #3]
 8006f82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2204      	movs	r2, #4
 8006fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d106      	bne.n	8006fe0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d110      	bne.n	8007024 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32ae      	adds	r2, #174	; 0xae
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	e01c      	b.n	800708a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b03      	cmp	r3, #3
 800705a:	d115      	bne.n	8007088 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	32ae      	adds	r2, #174	; 0xae
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00b      	beq.n	8007088 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4611      	mov	r1, r2
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	32ae      	adds	r2, #174	; 0xae
 80070a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e01c      	b.n	80070ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d115      	bne.n	80070ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32ae      	adds	r2, #174	; 0xae
 80070ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	32ae      	adds	r2, #174	; 0xae
 80070de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	78fa      	ldrb	r2, [r7, #3]
 80070e6:	4611      	mov	r1, r2
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00e      	beq.n	8007148 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6852      	ldr	r2, [r2, #4]
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	4611      	mov	r1, r2
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800715e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007178:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d920      	bls.n	80071f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80071b6:	e013      	b.n	80071e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80071b8:	f107 030a 	add.w	r3, r7, #10
 80071bc:	4619      	mov	r1, r3
 80071be:	6978      	ldr	r0, [r7, #20]
 80071c0:	f000 f81b 	bl	80071fa <USBD_GetNextDesc>
 80071c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b05      	cmp	r3, #5
 80071cc:	d108      	bne.n	80071e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	789b      	ldrb	r3, [r3, #2]
 80071d6:	78fa      	ldrb	r2, [r7, #3]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d008      	beq.n	80071ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	897b      	ldrh	r3, [r7, #10]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d8e5      	bhi.n	80071b8 <USBD_GetEpDesc+0x32>
 80071ec:	e000      	b.n	80071f0 <USBD_GetEpDesc+0x6a>
          break;
 80071ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071f0:	693b      	ldr	r3, [r7, #16]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	4413      	add	r3, r2
 8007214:	b29a      	uxth	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4413      	add	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007226:	68fb      	ldr	r3, [r7, #12]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007234:	b480      	push	{r7}
 8007236:	b087      	sub	sp, #28
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	3301      	adds	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007252:	8a3b      	ldrh	r3, [r7, #16]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	b21a      	sxth	r2, r3
 8007258:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800725c:	4313      	orrs	r3, r2
 800725e:	b21b      	sxth	r3, r3
 8007260:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007262:	89fb      	ldrh	r3, [r7, #14]
}
 8007264:	4618      	mov	r0, r3
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007286:	2b40      	cmp	r3, #64	; 0x40
 8007288:	d005      	beq.n	8007296 <USBD_StdDevReq+0x26>
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d857      	bhi.n	800733e <USBD_StdDevReq+0xce>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00f      	beq.n	80072b2 <USBD_StdDevReq+0x42>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d153      	bne.n	800733e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	32ae      	adds	r2, #174	; 0xae
 80072a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]
      break;
 80072b0:	e04a      	b.n	8007348 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d83b      	bhi.n	8007332 <USBD_StdDevReq+0xc2>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_StdDevReq+0x50>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007329 	.word	0x08007329
 80072c8:	08007333 	.word	0x08007333
 80072cc:	0800731f 	.word	0x0800731f
 80072d0:	08007333 	.word	0x08007333
 80072d4:	080072f3 	.word	0x080072f3
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	08007333 	.word	0x08007333
 80072e0:	0800730b 	.word	0x0800730b
 80072e4:	080072fd 	.word	0x080072fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa3c 	bl	8007768 <USBD_GetDescriptor>
          break;
 80072f0:	e024      	b.n	800733c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fba1 	bl	8007a3c <USBD_SetAddress>
          break;
 80072fa:	e01f      	b.n	800733c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fbe0 	bl	8007ac4 <USBD_SetConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]
          break;
 8007308:	e018      	b.n	800733c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fc83 	bl	8007c18 <USBD_GetConfig>
          break;
 8007312:	e013      	b.n	800733c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fcb4 	bl	8007c84 <USBD_GetStatus>
          break;
 800731c:	e00e      	b.n	800733c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fce3 	bl	8007cec <USBD_SetFeature>
          break;
 8007326:	e009      	b.n	800733c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fd07 	bl	8007d3e <USBD_ClrFeature>
          break;
 8007330:	e004      	b.n	800733c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fd5e 	bl	8007df6 <USBD_CtlError>
          break;
 800733a:	bf00      	nop
      }
      break;
 800733c:	e004      	b.n	8007348 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fd58 	bl	8007df6 <USBD_CtlError>
      break;
 8007346:	bf00      	nop
  }

  return ret;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop

08007354 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	d005      	beq.n	800737a <USBD_StdItfReq+0x26>
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d852      	bhi.n	8007418 <USBD_StdItfReq+0xc4>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <USBD_StdItfReq+0x26>
 8007376:	2b20      	cmp	r3, #32
 8007378:	d14e      	bne.n	8007418 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	2b02      	cmp	r3, #2
 8007386:	d840      	bhi.n	800740a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	889b      	ldrh	r3, [r3, #4]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b01      	cmp	r3, #1
 8007390:	d836      	bhi.n	8007400 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	889b      	ldrh	r3, [r3, #4]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fed9 	bl	8007152 <USBD_CoreFindIF>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2bff      	cmp	r3, #255	; 0xff
 80073a8:	d01d      	beq.n	80073e6 <USBD_StdItfReq+0x92>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d11a      	bne.n	80073e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80073b0:	7bba      	ldrb	r2, [r7, #14]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	32ae      	adds	r2, #174	; 0xae
 80073b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80073c0:	7bba      	ldrb	r2, [r7, #14]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073c8:	7bba      	ldrb	r2, [r7, #14]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32ae      	adds	r2, #174	; 0xae
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	4798      	blx	r3
 80073da:	4603      	mov	r3, r0
 80073dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073de:	e004      	b.n	80073ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073e4:	e001      	b.n	80073ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073e6:	2303      	movs	r3, #3
 80073e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d110      	bne.n	8007414 <USBD_StdItfReq+0xc0>
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10d      	bne.n	8007414 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fdc7 	bl	8007f8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073fe:	e009      	b.n	8007414 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fcf7 	bl	8007df6 <USBD_CtlError>
          break;
 8007408:	e004      	b.n	8007414 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fcf2 	bl	8007df6 <USBD_CtlError>
          break;
 8007412:	e000      	b.n	8007416 <USBD_StdItfReq+0xc2>
          break;
 8007414:	bf00      	nop
      }
      break;
 8007416:	e004      	b.n	8007422 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fceb 	bl	8007df6 <USBD_CtlError>
      break;
 8007420:	bf00      	nop
  }

  return ret;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	889b      	ldrh	r3, [r3, #4]
 800743e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	d007      	beq.n	800745c <USBD_StdEPReq+0x30>
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	f200 817f 	bhi.w	8007750 <USBD_StdEPReq+0x324>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02a      	beq.n	80074ac <USBD_StdEPReq+0x80>
 8007456:	2b20      	cmp	r3, #32
 8007458:	f040 817a 	bne.w	8007750 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800745c:	7bbb      	ldrb	r3, [r7, #14]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff fe83 	bl	800716c <USBD_CoreFindEP>
 8007466:	4603      	mov	r3, r0
 8007468:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800746a:	7b7b      	ldrb	r3, [r7, #13]
 800746c:	2bff      	cmp	r3, #255	; 0xff
 800746e:	f000 8174 	beq.w	800775a <USBD_StdEPReq+0x32e>
 8007472:	7b7b      	ldrb	r3, [r7, #13]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 8170 	bne.w	800775a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800747a:	7b7a      	ldrb	r2, [r7, #13]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007482:	7b7a      	ldrb	r2, [r7, #13]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	32ae      	adds	r2, #174	; 0xae
 8007488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8163 	beq.w	800775a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007494:	7b7a      	ldrb	r2, [r7, #13]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	32ae      	adds	r2, #174	; 0xae
 800749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074aa:	e156      	b.n	800775a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d008      	beq.n	80074c6 <USBD_StdEPReq+0x9a>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	f300 8145 	bgt.w	8007744 <USBD_StdEPReq+0x318>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 809b 	beq.w	80075f6 <USBD_StdEPReq+0x1ca>
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d03c      	beq.n	800753e <USBD_StdEPReq+0x112>
 80074c4:	e13e      	b.n	8007744 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d002      	beq.n	80074d8 <USBD_StdEPReq+0xac>
 80074d2:	2b03      	cmp	r3, #3
 80074d4:	d016      	beq.n	8007504 <USBD_StdEPReq+0xd8>
 80074d6:	e02c      	b.n	8007532 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00d      	beq.n	80074fa <USBD_StdEPReq+0xce>
 80074de:	7bbb      	ldrb	r3, [r7, #14]
 80074e0:	2b80      	cmp	r3, #128	; 0x80
 80074e2:	d00a      	beq.n	80074fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 f97b 	bl	80087e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 f977 	bl	80087e4 <USBD_LL_StallEP>
 80074f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074f8:	e020      	b.n	800753c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fc7a 	bl	8007df6 <USBD_CtlError>
              break;
 8007502:	e01b      	b.n	800753c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	885b      	ldrh	r3, [r3, #2]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10e      	bne.n	800752a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <USBD_StdEPReq+0xfe>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d008      	beq.n	800752a <USBD_StdEPReq+0xfe>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	88db      	ldrh	r3, [r3, #6]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f95d 	bl	80087e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fd2e 	bl	8007f8c <USBD_CtlSendStatus>

              break;
 8007530:	e004      	b.n	800753c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc5e 	bl	8007df6 <USBD_CtlError>
              break;
 800753a:	bf00      	nop
          }
          break;
 800753c:	e107      	b.n	800774e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d002      	beq.n	8007550 <USBD_StdEPReq+0x124>
 800754a:	2b03      	cmp	r3, #3
 800754c:	d016      	beq.n	800757c <USBD_StdEPReq+0x150>
 800754e:	e04b      	b.n	80075e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00d      	beq.n	8007572 <USBD_StdEPReq+0x146>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b80      	cmp	r3, #128	; 0x80
 800755a:	d00a      	beq.n	8007572 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f93f 	bl	80087e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007566:	2180      	movs	r1, #128	; 0x80
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f93b 	bl	80087e4 <USBD_LL_StallEP>
 800756e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007570:	e040      	b.n	80075f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fc3e 	bl	8007df6 <USBD_CtlError>
              break;
 800757a:	e03b      	b.n	80075f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	885b      	ldrh	r3, [r3, #2]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d136      	bne.n	80075f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 f945 	bl	8008822 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fcf7 	bl	8007f8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff fde2 	bl	800716c <USBD_CoreFindEP>
 80075a8:	4603      	mov	r3, r0
 80075aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ac:	7b7b      	ldrb	r3, [r7, #13]
 80075ae:	2bff      	cmp	r3, #255	; 0xff
 80075b0:	d01f      	beq.n	80075f2 <USBD_StdEPReq+0x1c6>
 80075b2:	7b7b      	ldrb	r3, [r7, #13]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d11c      	bne.n	80075f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80075b8:	7b7a      	ldrb	r2, [r7, #13]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80075c0:	7b7a      	ldrb	r2, [r7, #13]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32ae      	adds	r2, #174	; 0xae
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d010      	beq.n	80075f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075d0:	7b7a      	ldrb	r2, [r7, #13]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	32ae      	adds	r2, #174	; 0xae
 80075d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075e6:	e004      	b.n	80075f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fc03 	bl	8007df6 <USBD_CtlError>
              break;
 80075f0:	e000      	b.n	80075f4 <USBD_StdEPReq+0x1c8>
              break;
 80075f2:	bf00      	nop
          }
          break;
 80075f4:	e0ab      	b.n	800774e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d002      	beq.n	8007608 <USBD_StdEPReq+0x1dc>
 8007602:	2b03      	cmp	r3, #3
 8007604:	d032      	beq.n	800766c <USBD_StdEPReq+0x240>
 8007606:	e097      	b.n	8007738 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <USBD_StdEPReq+0x1f2>
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d004      	beq.n	800761e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fbed 	bl	8007df6 <USBD_CtlError>
                break;
 800761c:	e091      	b.n	8007742 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800761e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	da0b      	bge.n	800763e <USBD_StdEPReq+0x212>
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	3310      	adds	r3, #16
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	3304      	adds	r3, #4
 800763c:	e00b      	b.n	8007656 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	3304      	adds	r3, #4
 8007656:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2202      	movs	r2, #2
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fc37 	bl	8007ed8 <USBD_CtlSendData>
              break;
 800766a:	e06a      	b.n	8007742 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800766c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	da11      	bge.n	8007698 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	f003 020f 	and.w	r2, r3, #15
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	3324      	adds	r3, #36	; 0x24
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d117      	bne.n	80076be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fbb0 	bl	8007df6 <USBD_CtlError>
                  break;
 8007696:	e054      	b.n	8007742 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	f003 020f 	and.w	r2, r3, #15
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb9d 	bl	8007df6 <USBD_CtlError>
                  break;
 80076bc:	e041      	b.n	8007742 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da0b      	bge.n	80076de <USBD_StdEPReq+0x2b2>
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	3310      	adds	r3, #16
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	3304      	adds	r3, #4
 80076dc:	e00b      	b.n	80076f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	3304      	adds	r3, #4
 80076f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <USBD_StdEPReq+0x2d8>
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d103      	bne.n	800770c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e00e      	b.n	800772a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 f8a5 	bl	8008860 <USBD_LL_IsStallEP>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e002      	b.n	800772a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2202      	movs	r2, #2
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fbd1 	bl	8007ed8 <USBD_CtlSendData>
              break;
 8007736:	e004      	b.n	8007742 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fb5b 	bl	8007df6 <USBD_CtlError>
              break;
 8007740:	bf00      	nop
          }
          break;
 8007742:	e004      	b.n	800774e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb55 	bl	8007df6 <USBD_CtlError>
          break;
 800774c:	bf00      	nop
      }
      break;
 800774e:	e005      	b.n	800775c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fb4f 	bl	8007df6 <USBD_CtlError>
      break;
 8007758:	e000      	b.n	800775c <USBD_StdEPReq+0x330>
      break;
 800775a:	bf00      	nop
  }

  return ret;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	0a1b      	lsrs	r3, r3, #8
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	2b06      	cmp	r3, #6
 800778a:	f200 8128 	bhi.w	80079de <USBD_GetDescriptor+0x276>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <USBD_GetDescriptor+0x2c>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077b1 	.word	0x080077b1
 8007798:	080077c9 	.word	0x080077c9
 800779c:	08007809 	.word	0x08007809
 80077a0:	080079df 	.word	0x080079df
 80077a4:	080079df 	.word	0x080079df
 80077a8:	0800797f 	.word	0x0800797f
 80077ac:	080079ab 	.word	0x080079ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
      break;
 80077c6:	e112      	b.n	80079ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	7c1b      	ldrb	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10d      	bne.n	80077ec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	f107 0208 	add.w	r2, r7, #8
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	2202      	movs	r2, #2
 80077e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077ea:	e100      	b.n	80079ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f107 0208 	add.w	r2, r7, #8
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
 80077fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3301      	adds	r3, #1
 8007802:	2202      	movs	r2, #2
 8007804:	701a      	strb	r2, [r3, #0]
      break;
 8007806:	e0f2      	b.n	80079ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	885b      	ldrh	r3, [r3, #2]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b05      	cmp	r3, #5
 8007810:	f200 80ac 	bhi.w	800796c <USBD_GetDescriptor+0x204>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBD_GetDescriptor+0xb4>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007835 	.word	0x08007835
 8007820:	08007869 	.word	0x08007869
 8007824:	0800789d 	.word	0x0800789d
 8007828:	080078d1 	.word	0x080078d1
 800782c:	08007905 	.word	0x08007905
 8007830:	08007939 	.word	0x08007939
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7c12      	ldrb	r2, [r2, #16]
 800784c:	f107 0108 	add.w	r1, r7, #8
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
 8007854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007856:	e091      	b.n	800797c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 facb 	bl	8007df6 <USBD_CtlError>
            err++;
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	3301      	adds	r3, #1
 8007864:	72fb      	strb	r3, [r7, #11]
          break;
 8007866:	e089      	b.n	800797c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	7c12      	ldrb	r2, [r2, #16]
 8007880:	f107 0108 	add.w	r1, r7, #8
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3
 8007888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788a:	e077      	b.n	800797c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fab1 	bl	8007df6 <USBD_CtlError>
            err++;
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	3301      	adds	r3, #1
 8007898:	72fb      	strb	r3, [r7, #11]
          break;
 800789a:	e06f      	b.n	800797c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7c12      	ldrb	r2, [r2, #16]
 80078b4:	f107 0108 	add.w	r1, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078be:	e05d      	b.n	800797c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa97 	bl	8007df6 <USBD_CtlError>
            err++;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
 80078ca:	3301      	adds	r3, #1
 80078cc:	72fb      	strb	r3, [r7, #11]
          break;
 80078ce:	e055      	b.n	800797c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00b      	beq.n	80078f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7c12      	ldrb	r2, [r2, #16]
 80078e8:	f107 0108 	add.w	r1, r7, #8
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f2:	e043      	b.n	800797c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa7d 	bl	8007df6 <USBD_CtlError>
            err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
          break;
 8007902:	e03b      	b.n	800797c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	7c12      	ldrb	r2, [r2, #16]
 800791c:	f107 0108 	add.w	r1, r7, #8
 8007920:	4610      	mov	r0, r2
 8007922:	4798      	blx	r3
 8007924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007926:	e029      	b.n	800797c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa63 	bl	8007df6 <USBD_CtlError>
            err++;
 8007930:	7afb      	ldrb	r3, [r7, #11]
 8007932:	3301      	adds	r3, #1
 8007934:	72fb      	strb	r3, [r7, #11]
          break;
 8007936:	e021      	b.n	800797c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	7c12      	ldrb	r2, [r2, #16]
 8007950:	f107 0108 	add.w	r1, r7, #8
 8007954:	4610      	mov	r0, r2
 8007956:	4798      	blx	r3
 8007958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795a:	e00f      	b.n	800797c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa49 	bl	8007df6 <USBD_CtlError>
            err++;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	3301      	adds	r3, #1
 8007968:	72fb      	strb	r3, [r7, #11]
          break;
 800796a:	e007      	b.n	800797c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa41 	bl	8007df6 <USBD_CtlError>
          err++;
 8007974:	7afb      	ldrb	r3, [r7, #11]
 8007976:	3301      	adds	r3, #1
 8007978:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800797a:	bf00      	nop
      }
      break;
 800797c:	e037      	b.n	80079ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	7c1b      	ldrb	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798e:	f107 0208 	add.w	r2, r7, #8
 8007992:	4610      	mov	r0, r2
 8007994:	4798      	blx	r3
 8007996:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007998:	e029      	b.n	80079ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa2a 	bl	8007df6 <USBD_CtlError>
        err++;
 80079a2:	7afb      	ldrb	r3, [r7, #11]
 80079a4:	3301      	adds	r3, #1
 80079a6:	72fb      	strb	r3, [r7, #11]
      break;
 80079a8:	e021      	b.n	80079ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	7c1b      	ldrb	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10d      	bne.n	80079ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	f107 0208 	add.w	r2, r7, #8
 80079be:	4610      	mov	r0, r2
 80079c0:	4798      	blx	r3
 80079c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	2207      	movs	r2, #7
 80079ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079cc:	e00f      	b.n	80079ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fa10 	bl	8007df6 <USBD_CtlError>
        err++;
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	3301      	adds	r3, #1
 80079da:	72fb      	strb	r3, [r7, #11]
      break;
 80079dc:	e007      	b.n	80079ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fa08 	bl	8007df6 <USBD_CtlError>
      err++;
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	3301      	adds	r3, #1
 80079ea:	72fb      	strb	r3, [r7, #11]
      break;
 80079ec:	bf00      	nop
  }

  if (err != 0U)
 80079ee:	7afb      	ldrb	r3, [r7, #11]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d11e      	bne.n	8007a32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	88db      	ldrh	r3, [r3, #6]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d016      	beq.n	8007a2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079fc:	893b      	ldrh	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88da      	ldrh	r2, [r3, #6]
 8007a06:	893b      	ldrh	r3, [r7, #8]
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	bf28      	it	cs
 8007a0c:	4613      	movcs	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a12:	893b      	ldrh	r3, [r7, #8]
 8007a14:	461a      	mov	r2, r3
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fa5d 	bl	8007ed8 <USBD_CtlSendData>
 8007a1e:	e009      	b.n	8007a34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f9e7 	bl	8007df6 <USBD_CtlError>
 8007a28:	e004      	b.n	8007a34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 faae 	bl	8007f8c <USBD_CtlSendStatus>
 8007a30:	e000      	b.n	8007a34 <USBD_GetDescriptor+0x2cc>
    return;
 8007a32:	bf00      	nop
  }
}
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop

08007a3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	889b      	ldrh	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d131      	bne.n	8007ab2 <USBD_SetAddress+0x76>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	88db      	ldrh	r3, [r3, #6]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d12d      	bne.n	8007ab2 <USBD_SetAddress+0x76>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	885b      	ldrh	r3, [r3, #2]
 8007a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5c:	d829      	bhi.n	8007ab2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d104      	bne.n	8007a80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f9bc 	bl	8007df6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7e:	e01d      	b.n	8007abc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	7bfa      	ldrb	r2, [r7, #15]
 8007a84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 ff13 	bl	80088b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa7a 	bl	8007f8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa6:	e009      	b.n	8007abc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab0:	e004      	b.n	8007abc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f99e 	bl	8007df6 <USBD_CtlError>
  }
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	4b4e      	ldr	r3, [pc, #312]	; (8007c14 <USBD_SetConfig+0x150>)
 8007ada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007adc:	4b4d      	ldr	r3, [pc, #308]	; (8007c14 <USBD_SetConfig+0x150>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d905      	bls.n	8007af0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f985 	bl	8007df6 <USBD_CtlError>
    return USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e08c      	b.n	8007c0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d002      	beq.n	8007b02 <USBD_SetConfig+0x3e>
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d029      	beq.n	8007b54 <USBD_SetConfig+0x90>
 8007b00:	e075      	b.n	8007bee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007b02:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d020      	beq.n	8007b4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007b0a:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b14:	4b3f      	ldr	r3, [pc, #252]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fe ffe7 	bl	8006aee <USBD_SetClassConfig>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d008      	beq.n	8007b3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f962 	bl	8007df6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b3a:	e065      	b.n	8007c08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fa25 	bl	8007f8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2203      	movs	r2, #3
 8007b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b4a:	e05d      	b.n	8007c08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fa1d 	bl	8007f8c <USBD_CtlSendStatus>
      break;
 8007b52:	e059      	b.n	8007c08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b54:	4b2f      	ldr	r3, [pc, #188]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d112      	bne.n	8007b82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b64:	4b2b      	ldr	r3, [pc, #172]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b6e:	4b29      	ldr	r3, [pc, #164]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7fe ffd6 	bl	8006b26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa06 	bl	8007f8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b80:	e042      	b.n	8007c08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b82:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <USBD_SetConfig+0x150>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d02a      	beq.n	8007be6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fe ffc4 	bl	8006b26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b9e:	4b1d      	ldr	r3, [pc, #116]	; (8007c14 <USBD_SetConfig+0x150>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	; (8007c14 <USBD_SetConfig+0x150>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fe ff9d 	bl	8006aee <USBD_SetClassConfig>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00f      	beq.n	8007bde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f918 	bl	8007df6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fe ffa9 	bl	8006b26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bdc:	e014      	b.n	8007c08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f9d4 	bl	8007f8c <USBD_CtlSendStatus>
      break;
 8007be4:	e010      	b.n	8007c08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9d0 	bl	8007f8c <USBD_CtlSendStatus>
      break;
 8007bec:	e00c      	b.n	8007c08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f900 	bl	8007df6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <USBD_SetConfig+0x150>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fe ff92 	bl	8006b26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	73fb      	strb	r3, [r7, #15]
      break;
 8007c06:	bf00      	nop
  }

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000330 	.word	0x20000330

08007c18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88db      	ldrh	r3, [r3, #6]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d004      	beq.n	8007c34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8e2 	bl	8007df6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c32:	e023      	b.n	8007c7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	dc02      	bgt.n	8007c46 <USBD_GetConfig+0x2e>
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	dc03      	bgt.n	8007c4c <USBD_GetConfig+0x34>
 8007c44:	e015      	b.n	8007c72 <USBD_GetConfig+0x5a>
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d00b      	beq.n	8007c62 <USBD_GetConfig+0x4a>
 8007c4a:	e012      	b.n	8007c72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3308      	adds	r3, #8
 8007c56:	2201      	movs	r2, #1
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f93c 	bl	8007ed8 <USBD_CtlSendData>
        break;
 8007c60:	e00c      	b.n	8007c7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3304      	adds	r3, #4
 8007c66:	2201      	movs	r2, #1
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f934 	bl	8007ed8 <USBD_CtlSendData>
        break;
 8007c70:	e004      	b.n	8007c7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f8be 	bl	8007df6 <USBD_CtlError>
        break;
 8007c7a:	bf00      	nop
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d81e      	bhi.n	8007cda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	88db      	ldrh	r3, [r3, #6]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d004      	beq.n	8007cae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8a5 	bl	8007df6 <USBD_CtlError>
        break;
 8007cac:	e01a      	b.n	8007ce4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f043 0202 	orr.w	r2, r3, #2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	2202      	movs	r2, #2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f900 	bl	8007ed8 <USBD_CtlSendData>
      break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f88a 	bl	8007df6 <USBD_CtlError>
      break;
 8007ce2:	bf00      	nop
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f940 	bl	8007f8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007d0c:	e013      	b.n	8007d36 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	885b      	ldrh	r3, [r3, #2]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d10b      	bne.n	8007d2e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	889b      	ldrh	r3, [r3, #4]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f930 	bl	8007f8c <USBD_CtlSendStatus>
}
 8007d2c:	e003      	b.n	8007d36 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f860 	bl	8007df6 <USBD_CtlError>
}
 8007d36:	bf00      	nop
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b082      	sub	sp, #8
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d80b      	bhi.n	8007d6e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	885b      	ldrh	r3, [r3, #2]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d10c      	bne.n	8007d78 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f910 	bl	8007f8c <USBD_CtlSendStatus>
      }
      break;
 8007d6c:	e004      	b.n	8007d78 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f840 	bl	8007df6 <USBD_CtlError>
      break;
 8007d76:	e000      	b.n	8007d7a <USBD_ClrFeature+0x3c>
      break;
 8007d78:	bf00      	nop
  }
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	781a      	ldrb	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3301      	adds	r3, #1
 8007daa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff fa41 	bl	8007234 <SWAPBYTE>
 8007db2:	4603      	mov	r3, r0
 8007db4:	461a      	mov	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f7ff fa34 	bl	8007234 <SWAPBYTE>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	461a      	mov	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fa27 	bl	8007234 <SWAPBYTE>
 8007de6:	4603      	mov	r3, r0
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	80da      	strh	r2, [r3, #6]
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e00:	2180      	movs	r1, #128	; 0x80
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fcee 	bl	80087e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007e08:	2100      	movs	r1, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fcea 	bl	80087e4 <USBD_LL_StallEP>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d036      	beq.n	8007e9c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e32:	6938      	ldr	r0, [r7, #16]
 8007e34:	f000 f836 	bl	8007ea4 <USBD_GetLen>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	3301      	adds	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e58:	7dfb      	ldrb	r3, [r7, #23]
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2203      	movs	r2, #3
 8007e60:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	3301      	adds	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e68:	e013      	b.n	8007e92 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	4413      	add	r3, r2
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	613b      	str	r3, [r7, #16]
    idx++;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	4413      	add	r3, r2
 8007e88:	2200      	movs	r2, #0
 8007e8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e7      	bne.n	8007e6a <USBD_GetString+0x52>
 8007e9a:	e000      	b.n	8007e9e <USBD_GetString+0x86>
    return;
 8007e9c:	bf00      	nop
  }
}
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007eb4:	e005      	b.n	8007ec2 <USBD_GetLen+0x1e>
  {
    len++;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f5      	bne.n	8007eb6 <USBD_GetLen+0x12>
  }

  return len;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	2100      	movs	r1, #0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fcf9 	bl	80088f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fce8 	bl	80088f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 fcec 	bl	8008938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fcdb 	bl	8008938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2204      	movs	r2, #4
 8007f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fca7 	bl	80088f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2205      	movs	r2, #5
 8007fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fcb5 	bl	8008938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4912      	ldr	r1, [pc, #72]	; (8008028 <MX_USB_DEVICE_Init+0x50>)
 8007fe0:	4812      	ldr	r0, [pc, #72]	; (800802c <MX_USB_DEVICE_Init+0x54>)
 8007fe2:	f7fe fd07 	bl	80069f4 <USBD_Init>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fec:	f7f8 fdf0 	bl	8000bd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ff0:	490f      	ldr	r1, [pc, #60]	; (8008030 <MX_USB_DEVICE_Init+0x58>)
 8007ff2:	480e      	ldr	r0, [pc, #56]	; (800802c <MX_USB_DEVICE_Init+0x54>)
 8007ff4:	f7fe fd2e 	bl	8006a54 <USBD_RegisterClass>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ffe:	f7f8 fde7 	bl	8000bd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008002:	490c      	ldr	r1, [pc, #48]	; (8008034 <MX_USB_DEVICE_Init+0x5c>)
 8008004:	4809      	ldr	r0, [pc, #36]	; (800802c <MX_USB_DEVICE_Init+0x54>)
 8008006:	f7fe fc1f 	bl	8006848 <USBD_CDC_RegisterInterface>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008010:	f7f8 fdde 	bl	8000bd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008014:	4805      	ldr	r0, [pc, #20]	; (800802c <MX_USB_DEVICE_Init+0x54>)
 8008016:	f7fe fd53 	bl	8006ac0 <USBD_Start>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008020:	f7f8 fdd6 	bl	8000bd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008024:	bf00      	nop
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000160 	.word	0x20000160
 800802c:	20000334 	.word	0x20000334
 8008030:	200000cc 	.word	0x200000cc
 8008034:	2000014c 	.word	0x2000014c

08008038 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800803c:	2200      	movs	r2, #0
 800803e:	4905      	ldr	r1, [pc, #20]	; (8008054 <CDC_Init_FS+0x1c>)
 8008040:	4805      	ldr	r0, [pc, #20]	; (8008058 <CDC_Init_FS+0x20>)
 8008042:	f7fe fc1b 	bl	800687c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008046:	4905      	ldr	r1, [pc, #20]	; (800805c <CDC_Init_FS+0x24>)
 8008048:	4803      	ldr	r0, [pc, #12]	; (8008058 <CDC_Init_FS+0x20>)
 800804a:	f7fe fc39 	bl	80068c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800804e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000e10 	.word	0x20000e10
 8008058:	20000334 	.word	0x20000334
 800805c:	20000610 	.word	0x20000610

08008060 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008064:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008066:	4618      	mov	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
 800807c:	4613      	mov	r3, r2
 800807e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	2b23      	cmp	r3, #35	; 0x23
 8008084:	d84a      	bhi.n	800811c <CDC_Control_FS+0xac>
 8008086:	a201      	add	r2, pc, #4	; (adr r2, 800808c <CDC_Control_FS+0x1c>)
 8008088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808c:	0800811d 	.word	0x0800811d
 8008090:	0800811d 	.word	0x0800811d
 8008094:	0800811d 	.word	0x0800811d
 8008098:	0800811d 	.word	0x0800811d
 800809c:	0800811d 	.word	0x0800811d
 80080a0:	0800811d 	.word	0x0800811d
 80080a4:	0800811d 	.word	0x0800811d
 80080a8:	0800811d 	.word	0x0800811d
 80080ac:	0800811d 	.word	0x0800811d
 80080b0:	0800811d 	.word	0x0800811d
 80080b4:	0800811d 	.word	0x0800811d
 80080b8:	0800811d 	.word	0x0800811d
 80080bc:	0800811d 	.word	0x0800811d
 80080c0:	0800811d 	.word	0x0800811d
 80080c4:	0800811d 	.word	0x0800811d
 80080c8:	0800811d 	.word	0x0800811d
 80080cc:	0800811d 	.word	0x0800811d
 80080d0:	0800811d 	.word	0x0800811d
 80080d4:	0800811d 	.word	0x0800811d
 80080d8:	0800811d 	.word	0x0800811d
 80080dc:	0800811d 	.word	0x0800811d
 80080e0:	0800811d 	.word	0x0800811d
 80080e4:	0800811d 	.word	0x0800811d
 80080e8:	0800811d 	.word	0x0800811d
 80080ec:	0800811d 	.word	0x0800811d
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	0800811d 	.word	0x0800811d
 8008104:	0800811d 	.word	0x0800811d
 8008108:	0800811d 	.word	0x0800811d
 800810c:	0800811d 	.word	0x0800811d
 8008110:	0800811d 	.word	0x0800811d
 8008114:	0800811d 	.word	0x0800811d
 8008118:	0800811d 	.word	0x0800811d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800811c:	bf00      	nop
  }

  return (USBD_OK);
 800811e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	4805      	ldr	r0, [pc, #20]	; (8008150 <CDC_Receive_FS+0x24>)
 800813a:	f7fe fbc1 	bl	80068c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800813e:	4804      	ldr	r0, [pc, #16]	; (8008150 <CDC_Receive_FS+0x24>)
 8008140:	f7fe fc22 	bl	8006988 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008144:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000334 	.word	0x20000334

08008154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008164:	4b0d      	ldr	r3, [pc, #52]	; (800819c <CDC_Transmit_FS+0x48>)
 8008166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008176:	2301      	movs	r3, #1
 8008178:	e00b      	b.n	8008192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800817a:	887b      	ldrh	r3, [r7, #2]
 800817c:	461a      	mov	r2, r3
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4806      	ldr	r0, [pc, #24]	; (800819c <CDC_Transmit_FS+0x48>)
 8008182:	f7fe fb7b 	bl	800687c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008186:	4805      	ldr	r0, [pc, #20]	; (800819c <CDC_Transmit_FS+0x48>)
 8008188:	f7fe fbb8 	bl	80068fc <USBD_CDC_TransmitPacket>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000334 	.word	0x20000334

080081a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80081b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
	...

080081c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	4603      	mov	r3, r0
 80081cc:	6039      	str	r1, [r7, #0]
 80081ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2212      	movs	r2, #18
 80081d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	2000017c 	.word	0x2000017c

080081e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4603      	mov	r3, r0
 80081f0:	6039      	str	r1, [r7, #0]
 80081f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2204      	movs	r2, #4
 80081f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081fa:	4b03      	ldr	r3, [pc, #12]	; (8008208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	20000190 	.word	0x20000190

0800820c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4907      	ldr	r1, [pc, #28]	; (8008240 <USBD_FS_ProductStrDescriptor+0x34>)
 8008222:	4808      	ldr	r0, [pc, #32]	; (8008244 <USBD_FS_ProductStrDescriptor+0x38>)
 8008224:	f7ff fdf8 	bl	8007e18 <USBD_GetString>
 8008228:	e004      	b.n	8008234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <USBD_FS_ProductStrDescriptor+0x34>)
 800822e:	4805      	ldr	r0, [pc, #20]	; (8008244 <USBD_FS_ProductStrDescriptor+0x38>)
 8008230:	f7ff fdf2 	bl	8007e18 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008234:	4b02      	ldr	r3, [pc, #8]	; (8008240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20001610 	.word	0x20001610
 8008244:	08008abc 	.word	0x08008abc

08008248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	6039      	str	r1, [r7, #0]
 8008252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	4904      	ldr	r1, [pc, #16]	; (8008268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008258:	4804      	ldr	r0, [pc, #16]	; (800826c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800825a:	f7ff fddd 	bl	8007e18 <USBD_GetString>
  return USBD_StrDesc;
 800825e:	4b02      	ldr	r3, [pc, #8]	; (8008268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20001610 	.word	0x20001610
 800826c:	08008ad4 	.word	0x08008ad4

08008270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	221a      	movs	r2, #26
 8008280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008282:	f000 f843 	bl	800830c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008286:	4b02      	ldr	r3, [pc, #8]	; (8008290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000194 	.word	0x20000194

08008294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	6039      	str	r1, [r7, #0]
 800829e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80082a0:	79fb      	ldrb	r3, [r7, #7]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d105      	bne.n	80082b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	4907      	ldr	r1, [pc, #28]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082aa:	4808      	ldr	r0, [pc, #32]	; (80082cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082ac:	f7ff fdb4 	bl	8007e18 <USBD_GetString>
 80082b0:	e004      	b.n	80082bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4904      	ldr	r1, [pc, #16]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082b6:	4805      	ldr	r0, [pc, #20]	; (80082cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082b8:	f7ff fdae 	bl	8007e18 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20001610 	.word	0x20001610
 80082cc:	08008ae8 	.word	0x08008ae8

080082d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	6039      	str	r1, [r7, #0]
 80082da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d105      	bne.n	80082ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	4907      	ldr	r1, [pc, #28]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082e6:	4808      	ldr	r0, [pc, #32]	; (8008308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e8:	f7ff fd96 	bl	8007e18 <USBD_GetString>
 80082ec:	e004      	b.n	80082f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4904      	ldr	r1, [pc, #16]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082f2:	4805      	ldr	r0, [pc, #20]	; (8008308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f4:	f7ff fd90 	bl	8007e18 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f8:	4b02      	ldr	r3, [pc, #8]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20001610 	.word	0x20001610
 8008308:	08008af4 	.word	0x08008af4

0800830c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008312:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <Get_SerialNum+0x44>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008318:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <Get_SerialNum+0x48>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800831e:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <Get_SerialNum+0x4c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4413      	add	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008332:	2208      	movs	r2, #8
 8008334:	4909      	ldr	r1, [pc, #36]	; (800835c <Get_SerialNum+0x50>)
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f814 	bl	8008364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800833c:	2204      	movs	r2, #4
 800833e:	4908      	ldr	r1, [pc, #32]	; (8008360 <Get_SerialNum+0x54>)
 8008340:	68b8      	ldr	r0, [r7, #8]
 8008342:	f000 f80f 	bl	8008364 <IntToUnicode>
  }
}
 8008346:	bf00      	nop
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	1fff7a10 	.word	0x1fff7a10
 8008354:	1fff7a14 	.word	0x1fff7a14
 8008358:	1fff7a18 	.word	0x1fff7a18
 800835c:	20000196 	.word	0x20000196
 8008360:	200001a6 	.word	0x200001a6

08008364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008376:	2300      	movs	r3, #0
 8008378:	75fb      	strb	r3, [r7, #23]
 800837a:	e027      	b.n	80083cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	0f1b      	lsrs	r3, r3, #28
 8008380:	2b09      	cmp	r3, #9
 8008382:	d80b      	bhi.n	800839c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	0f1b      	lsrs	r3, r3, #28
 8008388:	b2da      	uxtb	r2, r3
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4619      	mov	r1, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	440b      	add	r3, r1
 8008394:	3230      	adds	r2, #48	; 0x30
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	e00a      	b.n	80083b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	0f1b      	lsrs	r3, r3, #28
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4619      	mov	r1, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	440b      	add	r3, r1
 80083ac:	3237      	adds	r2, #55	; 0x37
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	3301      	adds	r3, #1
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083c6:	7dfb      	ldrb	r3, [r7, #23]
 80083c8:	3301      	adds	r3, #1
 80083ca:	75fb      	strb	r3, [r7, #23]
 80083cc:	7dfa      	ldrb	r2, [r7, #23]
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d3d3      	bcc.n	800837c <IntToUnicode+0x18>
  }
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	; 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	605a      	str	r2, [r3, #4]
 80083f6:	609a      	str	r2, [r3, #8]
 80083f8:	60da      	str	r2, [r3, #12]
 80083fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008404:	d147      	bne.n	8008496 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008406:	2300      	movs	r3, #0
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	4a24      	ldr	r2, [pc, #144]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	6313      	str	r3, [r2, #48]	; 0x30
 8008416:	4b22      	ldr	r3, [pc, #136]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800842c:	2300      	movs	r3, #0
 800842e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	4619      	mov	r1, r3
 8008436:	481b      	ldr	r0, [pc, #108]	; (80084a4 <HAL_PCD_MspInit+0xc0>)
 8008438:	f7f8 ff50 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800843c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008442:	2302      	movs	r3, #2
 8008444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800844a:	2300      	movs	r3, #0
 800844c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800844e:	230a      	movs	r3, #10
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008452:	f107 0314 	add.w	r3, r7, #20
 8008456:	4619      	mov	r1, r3
 8008458:	4812      	ldr	r0, [pc, #72]	; (80084a4 <HAL_PCD_MspInit+0xc0>)
 800845a:	f7f8 ff3f 	bl	80012dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800845e:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	4a0f      	ldr	r2, [pc, #60]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	6353      	str	r3, [r2, #52]	; 0x34
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	4a0b      	ldr	r2, [pc, #44]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 8008474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008478:	6453      	str	r3, [r2, #68]	; 0x44
 800847a:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <HAL_PCD_MspInit+0xbc>)
 800847c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	2043      	movs	r0, #67	; 0x43
 800848c:	f7f8 feef 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008490:	2043      	movs	r0, #67	; 0x43
 8008492:	f7f8 ff08 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008496:	bf00      	nop
 8008498:	3728      	adds	r7, #40	; 0x28
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	40023800 	.word	0x40023800
 80084a4:	40020000 	.word	0x40020000

080084a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80084bc:	4619      	mov	r1, r3
 80084be:	4610      	mov	r0, r2
 80084c0:	f7fe fb4b 	bl	8006b5a <USBD_LL_SetupStage>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	4619      	mov	r1, r3
 80084f6:	f7fe fb85 	bl	8006c04 <USBD_LL_DataOutStage>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008514:	78fa      	ldrb	r2, [r7, #3]
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	334c      	adds	r3, #76	; 0x4c
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	4619      	mov	r1, r3
 800852a:	f7fe fc1e 	bl	8006d6a <USBD_LL_DataInStage>
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fd52 	bl	8006fee <USBD_LL_SOF>
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800855a:	2301      	movs	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d102      	bne.n	800856c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
 800856a:	e008      	b.n	800857e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d102      	bne.n	800857a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
 8008578:	e001      	b.n	800857e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800857a:	f7f8 fb29 	bl	8000bd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008584:	7bfa      	ldrb	r2, [r7, #15]
 8008586:	4611      	mov	r1, r2
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fcf2 	bl	8006f72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fc9a 	bl	8006ece <USBD_LL_Reset>
}
 800859a:	bf00      	nop
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fced 	bl	8006f92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	6812      	ldr	r2, [r2, #0]
 80085c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085d8:	4b04      	ldr	r3, [pc, #16]	; (80085ec <HAL_PCD_SuspendCallback+0x48>)
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	4a03      	ldr	r2, [pc, #12]	; (80085ec <HAL_PCD_SuspendCallback+0x48>)
 80085de:	f043 0306 	orr.w	r3, r3, #6
 80085e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	e000ed00 	.word	0xe000ed00

080085f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fcdd 	bl	8006fbe <USBD_LL_Resume>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	4611      	mov	r1, r2
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fd35 	bl	8007092 <USBD_LL_IsoOUTIncomplete>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fcf1 	bl	800702e <USBD_LL_IsoINIncomplete>
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fd47 	bl	80070f6 <USBD_LL_DevConnected>
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fd44 	bl	800710c <USBD_LL_DevDisconnected>
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d13c      	bne.n	8008716 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800869c:	4a20      	ldr	r2, [pc, #128]	; (8008720 <USBD_LL_Init+0x94>)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a1e      	ldr	r2, [pc, #120]	; (8008720 <USBD_LL_Init+0x94>)
 80086a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086ac:	4b1c      	ldr	r3, [pc, #112]	; (8008720 <USBD_LL_Init+0x94>)
 80086ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <USBD_LL_Init+0x94>)
 80086b6:	2204      	movs	r2, #4
 80086b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80086ba:	4b19      	ldr	r3, [pc, #100]	; (8008720 <USBD_LL_Init+0x94>)
 80086bc:	2202      	movs	r2, #2
 80086be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086c0:	4b17      	ldr	r3, [pc, #92]	; (8008720 <USBD_LL_Init+0x94>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80086c6:	4b16      	ldr	r3, [pc, #88]	; (8008720 <USBD_LL_Init+0x94>)
 80086c8:	2202      	movs	r2, #2
 80086ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086cc:	4b14      	ldr	r3, [pc, #80]	; (8008720 <USBD_LL_Init+0x94>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <USBD_LL_Init+0x94>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086d8:	4b11      	ldr	r3, [pc, #68]	; (8008720 <USBD_LL_Init+0x94>)
 80086da:	2200      	movs	r2, #0
 80086dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086de:	4b10      	ldr	r3, [pc, #64]	; (8008720 <USBD_LL_Init+0x94>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <USBD_LL_Init+0x94>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086ea:	480d      	ldr	r0, [pc, #52]	; (8008720 <USBD_LL_Init+0x94>)
 80086ec:	f7f9 fdc0 	bl	8002270 <HAL_PCD_Init>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086f6:	f7f8 fa6b 	bl	8000bd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	4808      	ldr	r0, [pc, #32]	; (8008720 <USBD_LL_Init+0x94>)
 80086fe:	f7fb f818 	bl	8003732 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008702:	2240      	movs	r2, #64	; 0x40
 8008704:	2100      	movs	r1, #0
 8008706:	4806      	ldr	r0, [pc, #24]	; (8008720 <USBD_LL_Init+0x94>)
 8008708:	f7fa ffcc 	bl	80036a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800870c:	2280      	movs	r2, #128	; 0x80
 800870e:	2101      	movs	r1, #1
 8008710:	4803      	ldr	r0, [pc, #12]	; (8008720 <USBD_LL_Init+0x94>)
 8008712:	f7fa ffc7 	bl	80036a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20001810 	.word	0x20001810

08008724 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800873a:	4618      	mov	r0, r3
 800873c:	f7f9 feb5 	bl	80024aa <HAL_PCD_Start>
 8008740:	4603      	mov	r3, r0
 8008742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	4618      	mov	r0, r3
 8008748:	f000 f942 	bl	80089d0 <USBD_Get_USB_Status>
 800874c:	4603      	mov	r3, r0
 800874e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008750:	7bbb      	ldrb	r3, [r7, #14]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	4608      	mov	r0, r1
 8008764:	4611      	mov	r1, r2
 8008766:	461a      	mov	r2, r3
 8008768:	4603      	mov	r3, r0
 800876a:	70fb      	strb	r3, [r7, #3]
 800876c:	460b      	mov	r3, r1
 800876e:	70bb      	strb	r3, [r7, #2]
 8008770:	4613      	mov	r3, r2
 8008772:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008782:	78bb      	ldrb	r3, [r7, #2]
 8008784:	883a      	ldrh	r2, [r7, #0]
 8008786:	78f9      	ldrb	r1, [r7, #3]
 8008788:	f7fa fb86 	bl	8002e98 <HAL_PCD_EP_Open>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f91c 	bl	80089d0 <USBD_Get_USB_Status>
 8008798:	4603      	mov	r3, r0
 800879a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879c:	7bbb      	ldrb	r3, [r7, #14]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087c0:	78fa      	ldrb	r2, [r7, #3]
 80087c2:	4611      	mov	r1, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fa fbcf 	bl	8002f68 <HAL_PCD_EP_Close>
 80087ca:	4603      	mov	r3, r0
 80087cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f8fd 	bl	80089d0 <USBD_Get_USB_Status>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087da:	7bbb      	ldrb	r3, [r7, #14]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	4611      	mov	r1, r2
 8008802:	4618      	mov	r0, r3
 8008804:	f7fa fca7 	bl	8003156 <HAL_PCD_EP_SetStall>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f8de 	bl	80089d0 <USBD_Get_USB_Status>
 8008814:	4603      	mov	r3, r0
 8008816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008818:	7bbb      	ldrb	r3, [r7, #14]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	460b      	mov	r3, r1
 800882c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800883c:	78fa      	ldrb	r2, [r7, #3]
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f7fa fcec 	bl	800321e <HAL_PCD_EP_ClrStall>
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f8bf 	bl	80089d0 <USBD_Get_USB_Status>
 8008852:	4603      	mov	r3, r0
 8008854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008856:	7bbb      	ldrb	r3, [r7, #14]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008872:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008878:	2b00      	cmp	r3, #0
 800887a:	da0b      	bge.n	8008894 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	4613      	mov	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	333e      	adds	r3, #62	; 0x3e
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	e00b      	b.n	80088ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80088aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fa fab9 	bl	8002e4e <HAL_PCD_SetAddress>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f874 	bl	80089d0 <USBD_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	460b      	mov	r3, r1
 8008904:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008914:	7af9      	ldrb	r1, [r7, #11]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	f7fa fbd2 	bl	80030c2 <HAL_PCD_EP_Transmit>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f853 	bl	80089d0 <USBD_Get_USB_Status>
 800892a:	4603      	mov	r3, r0
 800892c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800892e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	460b      	mov	r3, r1
 8008946:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008956:	7af9      	ldrb	r1, [r7, #11]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	f7fa fb4e 	bl	8002ffc <HAL_PCD_EP_Receive>
 8008960:	4603      	mov	r3, r0
 8008962:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f832 	bl	80089d0 <USBD_Get_USB_Status>
 800896c:	4603      	mov	r3, r0
 800896e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008970:	7dbb      	ldrb	r3, [r7, #22]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	460b      	mov	r3, r1
 8008984:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f7fa fb7e 	bl	8003092 <HAL_PCD_EP_GetRxCount>
 8008996:	4603      	mov	r3, r0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089a8:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <USBD_static_malloc+0x18>)
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20001d1c 	.word	0x20001d1c

080089bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]

}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d817      	bhi.n	8008a14 <USBD_Get_USB_Status+0x44>
 80089e4:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <USBD_Get_USB_Status+0x1c>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	080089fd 	.word	0x080089fd
 80089f0:	08008a03 	.word	0x08008a03
 80089f4:	08008a09 	.word	0x08008a09
 80089f8:	08008a0f 	.word	0x08008a0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008a00:	e00b      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	73fb      	strb	r3, [r7, #15]
    break;
 8008a06:	e008      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0c:	e005      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	73fb      	strb	r3, [r7, #15]
    break;
 8008a12:	e002      	b.n	8008a1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a14:	2303      	movs	r3, #3
 8008a16:	73fb      	strb	r3, [r7, #15]
    break;
 8008a18:	bf00      	nop
  }
  return usb_status;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <__libc_init_array>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4d0d      	ldr	r5, [pc, #52]	; (8008a60 <__libc_init_array+0x38>)
 8008a2c:	4c0d      	ldr	r4, [pc, #52]	; (8008a64 <__libc_init_array+0x3c>)
 8008a2e:	1b64      	subs	r4, r4, r5
 8008a30:	10a4      	asrs	r4, r4, #2
 8008a32:	2600      	movs	r6, #0
 8008a34:	42a6      	cmp	r6, r4
 8008a36:	d109      	bne.n	8008a4c <__libc_init_array+0x24>
 8008a38:	4d0b      	ldr	r5, [pc, #44]	; (8008a68 <__libc_init_array+0x40>)
 8008a3a:	4c0c      	ldr	r4, [pc, #48]	; (8008a6c <__libc_init_array+0x44>)
 8008a3c:	f000 f820 	bl	8008a80 <_init>
 8008a40:	1b64      	subs	r4, r4, r5
 8008a42:	10a4      	asrs	r4, r4, #2
 8008a44:	2600      	movs	r6, #0
 8008a46:	42a6      	cmp	r6, r4
 8008a48:	d105      	bne.n	8008a56 <__libc_init_array+0x2e>
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a50:	4798      	blx	r3
 8008a52:	3601      	adds	r6, #1
 8008a54:	e7ee      	b.n	8008a34 <__libc_init_array+0xc>
 8008a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5a:	4798      	blx	r3
 8008a5c:	3601      	adds	r6, #1
 8008a5e:	e7f2      	b.n	8008a46 <__libc_init_array+0x1e>
 8008a60:	08008b24 	.word	0x08008b24
 8008a64:	08008b24 	.word	0x08008b24
 8008a68:	08008b24 	.word	0x08008b24
 8008a6c:	08008b28 	.word	0x08008b28

08008a70 <memset>:
 8008a70:	4402      	add	r2, r0
 8008a72:	4603      	mov	r3, r0
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d100      	bne.n	8008a7a <memset+0xa>
 8008a78:	4770      	bx	lr
 8008a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a7e:	e7f9      	b.n	8008a74 <memset+0x4>

08008a80 <_init>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr

08008a8c <_fini>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	bf00      	nop
 8008a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a92:	bc08      	pop	{r3}
 8008a94:	469e      	mov	lr, r3
 8008a96:	4770      	bx	lr
